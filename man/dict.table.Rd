% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add.R, R/dict.table.R
\name{add.dict.table}
\alias{add.dict.table}
\alias{dict.table}
\alias{as.dict.table}
\alias{as.dict.table.data.table}
\alias{is.dict.table}
\alias{as.data.table.dict.table}
\alias{rbind.dict.table}
\title{dict.table}
\usage{
## S3 method for class 'dict.table'
add(x, ...)

dict.table(...)

as.dict.table(x, ...)

\method{as.dict.table}{data.table}(x, copy = TRUE, ...)

is.dict.table(x)

\method{as.data.table}{dict.table}(x, copy = TRUE, ...)

\method{rbind}{dict.table}(x, ...)
}
\arguments{
\item{...}{initial elements of the form \code{key = value} to be put into the
\code{dict.table} and/or additional arguments to be passed to the
\code{\link[data.table:data.table]{data.table::data.table()}} constructor. Note that in contrast to
\code{\link[=data.table]{data.table()}}, \code{\link[=dict.table]{dict.table()}} does not allow duplicated keys and therefore
always is initialized as \code{data.table(..., check.names = TRUE)}.}

\item{x}{any \code{R} object or a \code{dict.table} object.}

\item{copy}{if \code{TRUE} creates a copy of the \code{data.table} object otherwise
works on the passed object by reference.}
}
\description{
The \code{\link[=dict.table]{dict.table()}} is a mix of a dictionary and a
\code{data.table}, that is, it can be considered as a dictionary with
all elements having the same length or as a data.table with extended
functionality to manage its data columns.
Basically a dict.table behaves like both a dict and a data.table, so that
all dict and data.table functions and operators are available.

As with \code{\link[=Dict]{Dict()}} objects, it provides reference semantics so that changes
like insertion and deletion of elements are done on the original object.
}
\details{
\itemize{
\item \code{add(x, ...)} adds \code{key = value} pairs to \code{x}. If one of the
keys already exists, an error is given.
}
}
\examples{
dit = dict.table(a = 1:3)
add(dit, b = 3:1, d = 4:6)

\dontrun{
add(dit, a = 7:9)  # column 'a' already exists}

# Some basic examples using some typical data.table and dict operations.
# The constructor can take the 'key' argument known from data.table():
dit = dict.table(x = rep(c("b","a","c"), each = 3), y = c(1,3,6), key = "y")
dit
setkey(dit, "x")                             # sort by 'x'
dit
(add(dit, "v", 1:9))                         # add column v = 1:9
dit[y > 5]
(discard(dit, "x"))                          # discard column 'x'
\dontrun{
    getval(dit, "x")                         # column 'x' does not exist
    setval(dit, "x", 0)                      # cannot be set, if not exist
}
(setval(dit, "x", 0, add = TRUE))            # ok - re-adds column 'x' with all 0s
peek(dit, "x")                               # glance at column 'x'
has(dit, "x")                                # TRUE
pop(dit, "x")                                # get column and remove it
has(dit, "x")                                # FALSE

# Copy and reference semantics when coercing *from* a data.table
dat = data.table(a = 1, b = 2)
dit = as.dict.table(dat)
is.dict.table(dit)                           # TRUE
is.dict.table(dat)                           # FALSE
setval(dit, "a", 9)
dit[["a"]]                                   # 9
dat[["a"]]                                   # 1
dit.dat = as.dict.table(dat, copy = FALSE)   # init by reference
setval(dit.dat, "a", 9)
dit.dat[["a"]]                               # 9
dat[["a"]]                                   # 9
is.dict.table(dit.dat)                       # TRUE
is.dict.table(dat)                           # TRUE now as well!

# Coerce from dict
d = dict(a = 1, b = 1:3)
as.dict.table(d)


Copy and reference semantics when coercing *to* a data.table
dit = dict.table(a = 1, b = 2)
dat = as.data.table(dit)
is.data.table(dat)                           # TRUE
data.table::set(dat, j = "a", value = 9)
dat[["a"]]                                   # 9
dit[["a"]]                                   # 1
dat.dit = as.data.table(dit, copy = FALSE)   # init by reference
is.data.table(dat.dit)                       # TRUE
is.dict.table(dit)                           # FALSE - not a dict.table anymore ...
is.data.table(dit)                           # TRUE  - ... but a data.table
data.table::set(dat.dit, j = "a", value = 9)
dat.dit[["a"]]                               # 9
dit[["a"]]                                   # 9 - also changed
dit = dict.table(a = 1:2, b = 1:2)
rbind(dit, dit)

# Also works with data.tables
dat = dict.table(a = 3:4, b = 3:4)
dit.dat = rbind(dit, dat)
}
\seealso{
\code{\link[=dict]{dict()}}, \code{\link[data.table:data.table]{data.table::data.table()}}
}
