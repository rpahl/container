% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DictS3.R, R/add.R, R/getval.R, R/peek.R,
%   R/rename.R, R/replace.R
\name{DictS3}
\alias{DictS3}
\alias{dict}
\alias{as.dict}
\alias{is.dict}
\alias{add.Dict}
\alias{getval.Dict}
\alias{peek.Dict}
\alias{rename.Dict}
\alias{replace.Dict}
\title{Dict methods}
\usage{
dict(...)

as.dict(x)

is.dict(x)

add(.x, ...)
add_(.x, ...)

getval(x, key)
getvalues(x, ...)

peek(.x, key, default)

* rename(.x, old, new)
* rename_(.x, old, new)

replace(.x, key, value, add = FALSE)
replace_(.x, key, value, add = FALSE)
}
\arguments{
\item{...}{elements put into the \code{Dict}.}

\item{x}{\code{R} object of \code{ANY} type for \code{\link[=as.dict]{as.dict()}} and \code{\link[=is.dict]{is.dict()}}
or of class \code{Dict} for the \code{S3} methods.}

\item{key}{\code{character} single key string or vector of keys}
}
\description{
The \code{\link[=dict]{dict()}} resembles Python's dict type, and is implemented
as a specialized associative \code{\link[=Container]{Container()}} thus sharing all \link[=Container]{container()}
methods with some of them being overridden to account for the associative
key-value pair semantic.
}
\details{
For a full list of all dict methods see \code{\link[=Dict]{Dict()}}.

While the \code{\link[=Dict]{Dict()}} class is based on the \code{R6} framework and
provides reference semantics, the methods described here provide an \code{S3}
interface with copy semantics. Note that any \code{S3} methods defined for the
\code{Container} class also work with \code{Dict} objects, even if not overwritten
explicitly.
\subsection{Methods}{
}

\itemize{
\item \code{dict(...)} initializes and returns an object of class \code{Dict}
}

\itemize{
\item \code{as.dict(x)} coerces \code{x} to a dictionary
}

\itemize{
\item \code{is.dict(x)} returns \code{TRUE} if \code{x} is of class \code{Dict}
and \code{FALSE} otherwise.
}

\itemize{
\item \code{add(.x, ...)} adds \code{key = value} pairs to \code{.x}. If one of the
keys already exists, an error is given.
\item \code{add_(.x, ...)} same as \code{add(.x, ...)} but adds by reference.
}

\itemize{
\item \code{getval(x, key)} retrieves value at \code{key}, which can be specified as one ore
more character values. If a \code{key} does not exist, an error is given.
For a single key the raw value associated with
the key is returned, otherwise a new \code{dict} object containing all requested
key-value pairs.
\item \code{getvalues(x, ...)} is a convenience version of \code{getval(x, key)} enabling
to pass several keys separated by commas. In contrast to \code{getval}, it always
returns a \code{Dict} object, regardless whether one or more keys were specified.
}

\itemize{
\item \code{peek(.x, key, default)} returns the associated value if \code{key} does exists,
otherwise the given \code{default} value.
}

\code{rename(.x, old, new)} and \code{rename_(.x, old, new)} rename one or more keys
from \code{old} to \code{new}, respectively, by copy and in place (i.e. by reference).

\itemize{
\item \code{replace(.x, key, value, add = FALSE)} and \code{replace_(.x, ...)} replace value
at \code{key}. If \code{key} does not exist, an error is given unless \code{add} was set to
\code{TRUE}.
}
}
\examples{
d = dict(a = 1, b = "one", f = mean)
print(d)
print(values(d))

\dontrun{
dict(a = 1, 2)                       # all elements must be named}

# Coercion
as.dict(list(A = 1:3, B = "b"))
as.dict(c(x = 1, y = "x", z = 2 + 3))

d = dict(a = 1)
add(d, b = 2, co = container(1:3))

\dontrun{
add(d, a = 7:9)  # key 'a' already in Dict}

d = dict(a = 1, b = 1:3)
getval(d, "b")
getval(dit, c("a", "b")) # or alternatively:
getvalues(d, "a", "b")

d = dict(a = 1, b = 1:3)
peek(d, "b")
peek(d, "x")
peek(d, "x", default = 4:7)
d = dict(a = 1, b = 2, c = 3)
(rename(d, c("a", "b"), c("a1", "y")))

d = dict(a = 1)
replace(d, "a", 1:5)
\dontrun{
replace(d, "b", 2)              # key 'b' not in Dict}
replace(d, "b", 2, add = TRUE)  # ok, adds value
}
\seealso{
See \code{\link[=container]{container()}} for all inherited methods. For the full class
documentation see \code{\link[=Dict]{Dict()}} and it's superclass \link[=container]{Container()}.
}
