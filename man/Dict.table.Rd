% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dict.table.R
\name{Dict.table}
\alias{Dict.table}
\title{A Dict.table class}
\description{
The \code{\link[=Dict.table]{Dict.table()}} is a mix of a dictionary and a
\code{data.table}. In particular, it is a dictionary (inheriting all \code{\link[=Dict]{Dict()}}
methods) with each element having the same length.
}
\seealso{
\code{\link[=Dict]{Dict()}}, \code{\link[=dict.table]{dict.table()}}, \code{\link[data.table:data.table]{data.table::data.table()}}
}
\author{
Roman Pahl
}
\section{Super classes}{
\code{\link[container:Iterable]{container::Iterable}} -> \code{\link[container:Container]{container::Container}} -> \code{\link[container:Dict]{container::Dict}} -> \code{Dict.table}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Dict.table$new()}}
\item \href{#method-dim}{\code{Dict.table$dim()}}
\item \href{#method-delete}{\code{Dict.table$delete()}}
\item \href{#method-discard}{\code{Dict.table$discard()}}
\item \href{#method-has}{\code{Dict.table$has()}}
\item \href{#method-ncol}{\code{Dict.table$ncol()}}
\item \href{#method-nrow}{\code{Dict.table$nrow()}}
\item \href{#method-peek}{\code{Dict.table$peek()}}
\item \href{#method-print}{\code{Dict.table$print()}}
\item \href{#method-rbind}{\code{Dict.table$rbind()}}
\item \href{#method-rename}{\code{Dict.table$rename()}}
\item \href{#method-setval}{\code{Dict.table$setval()}}
\item \href{#method-sortkey}{\code{Dict.table$sortkey()}}
\item \href{#method-clone}{\code{Dict.table$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Iterable" data-id="iter">}\href{../../container/html/Iterable.html#method-iter}{\code{container::Iterable$iter()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="clear">}\href{../../container/html/Container.html#method-clear}{\code{container::Container$clear()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="empty">}\href{../../container/html/Container.html#method-empty}{\code{container::Container$empty()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="length">}\href{../../container/html/Container.html#method-length}{\code{container::Container$length()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="size">}\href{../../container/html/Container.html#method-size}{\code{container::Container$size()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="type">}\href{../../container/html/Container.html#method-type}{\code{container::Container$type()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="values">}\href{../../container/html/Container.html#method-values}{\code{container::Container$values()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="add">}\href{../../container/html/Dict.html#method-add}{\code{container::Dict$add()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="get">}\href{../../container/html/Dict.html#method-get}{\code{container::Dict$get()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="getval">}\href{../../container/html/Dict.html#method-getval}{\code{container::Dict$getval()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="keys">}\href{../../container/html/Dict.html#method-keys}{\code{container::Dict$keys()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="pop">}\href{../../container/html/Dict.html#method-pop}{\code{container::Dict$pop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="popitem">}\href{../../container/html/Dict.html#method-popitem}{\code{container::Dict$popitem()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="remove">}\href{../../container/html/Dict.html#method-remove}{\code{container::Dict$remove()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="set">}\href{../../container/html/Dict.html#method-set}{\code{container::Dict$set()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="sort">}\href{../../container/html/Dict.html#method-sort}{\code{container::Dict$sort()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="update">}\href{../../container/html/Dict.html#method-update}{\code{container::Dict$update()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\code{Dict.table} constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$new(..., asis = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{initial elements put into the \code{Dict.table} and further
args passed to `\code{\link[data.table:as.data.table]{data.table::as.data.table()}}.}

\item{\code{asis}}{\code{logical} if FALSE, the constructor of the super class
is skipped, which means, checking of valid key names is skipped as
well. On the other hand, this allows to initialize the \code{Dict.table}
with a \code{data.table} object by reference.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Dict.table}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dim"></a>}}
\if{latex}{\out{\hypertarget{method-dim}{}}}
\subsection{Method \code{dim()}}{
Dimensions of the \code{Dict.table} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$dim()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{integer} number of columns
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete"></a>}}
\if{latex}{\out{\hypertarget{method-delete}{}}}
\subsection{Method \code{delete()}}{
delete value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$delete(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{\code{character} names or indices of columns to delete.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If \code{key} in \code{Dict.table}, delete it, otherwise raise an error.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-discard"></a>}}
\if{latex}{\out{\hypertarget{method-discard}{}}}
\subsection{Method \code{discard()}}{
If key in \code{Dict.table}, delete it.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$discard(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{\code{character} column names or indices to discard.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Dict.table}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has"></a>}}
\if{latex}{\out{\hypertarget{method-has}{}}}
\subsection{Method \code{has()}}{
Determine if \code{Dict.table} has a \code{key}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$has(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{\code{character} name of key.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if \code{key} in \code{Dict.table}, otherwise \code{FALSE}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ncol"></a>}}
\if{latex}{\out{\hypertarget{method-ncol}{}}}
\subsection{Method \code{ncol()}}{
Number of columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$ncol()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{integer} number of columns
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-nrow"></a>}}
\if{latex}{\out{\hypertarget{method-nrow}{}}}
\subsection{Method \code{nrow()}}{
Number of rows
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$nrow()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{integer} number of rows
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peek"></a>}}
\if{latex}{\out{\hypertarget{method-peek}{}}}
\subsection{Method \code{peek()}}{
Peek for value in \code{Dict.table}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$peek(key, default = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{\code{character} name of key.}

\item{\code{default}}{returned default value.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
value for \code{key} if \code{key} is in the \code{Dict.table} else \code{default}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print Data.table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{further args passed to \code{\link[=print.data.table]{print.data.table()}}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rbind"></a>}}
\if{latex}{\out{\hypertarget{method-rbind}{}}}
\subsection{Method \code{rbind()}}{
row-bind this with another \code{\link[=Dict.table]{Dict.table()}} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$rbind(other, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{other}}{\code{Dict.table} object to row-bind}

\item{\code{...}}{further args passed to \code{\link[data.table:rbindlist]{data.table::rbindlist()}}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a copy of original \code{Dict.table} with a copy of \code{other}
attached at the bottom.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rename"></a>}}
\if{latex}{\out{\hypertarget{method-rename}{}}}
\subsection{Method \code{rename()}}{
Rename a \code{key} in the \code{Dict}. An error is signaled, if
either the \code{old} key is not in the \code{Dict} or the \code{new} key results
in a name-clash with an existing key.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$rename(old, new)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{old}}{\code{character} name of key to be renamed.}

\item{\code{new}}{\code{character} new key name.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Dict.table} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setval"></a>}}
\if{latex}{\out{\hypertarget{method-setval}{}}}
\subsection{Method \code{setval()}}{
Overrides \code{value} at \code{key} if \code{key} is already in the
\code{Dict.table}. If \code{key} not in \code{Dict.table}, an error is thrown
unless \code{add} was set to \code{TRUE}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$setval(key, value, add = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{\code{character} name of key.}

\item{\code{value}}{the value to be set}

\item{\code{add}}{\code{logical} if \code{TRUE} the value is set regardless whether
\code{key} already exists in \code{Dict.table}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Dict.table} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sortkey"></a>}}
\if{latex}{\out{\hypertarget{method-sortkey}{}}}
\subsection{Method \code{sortkey()}}{
Re-order columns according to key-order
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$sortkey(decr = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{decr}}{\code{logical} if \code{TRUE} sort in decreasing order.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Dict.table}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.table$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
