% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dict.frame.R
\docType{class}
\name{Dict.frame}
\alias{Dict.frame}
\title{A Dict.frame class}
\description{
The \code{Dict.frame} is a mix of a dictionary and a \code{data.frame}.
}
\section{Inherited methods}{

Inherits all methods from \code{\link[=dict]{dict()}} but overrides the internal initialize
function and the following member functions:
\itemize{
\item \link{add(key, value)}: if \code{key} not yet in \code{Dict.frame}, insert \code{value} at \code{key},
otherwise signal an error.
\item \link{discard(key)}: if \code{key} in \code{Dict.frame}, remove it.
\item \link{has(key)}: TRUE if \code{key} in \code{Dict.frame} else FALSE.
\item \link{remove(key)}: if \code{key} in Dict.frame, remove it, otherwise raise an error.
}
}

\section{R6 constructor}{

\code{Dict.frame$new(x = list())}
}

\section{Dict.frame methods}{

\itemize{
\item \link{get(key)}: if \code{key} in \code{Dict.frame}, return value, else throw key-error.
\item \code{\link[=keys]{keys()}}: return a character vector of all keys.
\item \link{peek(key, default=NULL)}: return the value for \code{key} if \code{key} is in the
\code{Dict.frame}, else \code{default}.
\item \link{pop(key)}: if \code{key} in \code{Dict.frame}, return its value and discard it
from the \code{Dict.frame}.
\item popitem: remove and return an arbitrary column from the Dict.frame. This
function can be used to destructively iterate over a \code{Dict.frame}.
\item \link{set(key, value, add=FALSE)}: like \code{add} but overwrites value if \code{key} is
already in the \code{Dict.frame}. If \code{key} not in \code{Dict}, an error is thrown
unless \code{add} was set to \code{TRUE}.
\item \link{sort(decr = FALSE)}: sort columns in dict.frame according to column names.
\item \link{update(other = Dict.frame$new())}: add column(s) of \code{other} to the
dict.frame if the key is not in the dictionary and update the column with
the new column otherwise.
}
}

\examples{
TODO:
}
\seealso{
\code{\link[=dict]{dict()}}, \code{\link[base:data.frame]{base::data.frame()}}
}
\author{
Roman Pahl
}
\section{Super classes}{
\code{\link[container:Iterable]{container::Iterable}} -> \code{\link[container:Container]{container::Container}} -> \code{\link[container:Dict]{container::Dict}} -> \code{Dict.frame}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-nrow}{\code{Dict.frame$nrow()}}
\item \href{#method-ncol}{\code{Dict.frame$ncol()}}
\item \href{#method-rownames}{\code{Dict.frame$rownames()}}
\item \href{#method-new}{\code{Dict.frame$new()}}
\item \href{#method-add}{\code{Dict.frame$add()}}
\item \href{#method-set}{\code{Dict.frame$set()}}
\item \href{#method-update}{\code{Dict.frame$update()}}
\item \href{#method-print}{\code{Dict.frame$print()}}
\item \href{#method-clone}{\code{Dict.frame$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Iterable" data-id="iter">}\href{../../container/html/Iterable.html#method-iter}{\code{container::Iterable$iter()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="apply">}\href{../../container/html/Container.html#method-apply}{\code{container::Container$apply()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="clear">}\href{../../container/html/Container.html#method-clear}{\code{container::Container$clear()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="empty">}\href{../../container/html/Container.html#method-empty}{\code{container::Container$empty()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="size">}\href{../../container/html/Container.html#method-size}{\code{container::Container$size()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="type">}\href{../../container/html/Container.html#method-type}{\code{container::Container$type()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="values">}\href{../../container/html/Container.html#method-values}{\code{container::Container$values()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="discard">}\href{../../container/html/Dict.html#method-discard}{\code{container::Dict$discard()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="get">}\href{../../container/html/Dict.html#method-get}{\code{container::Dict$get()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="has">}\href{../../container/html/Dict.html#method-has}{\code{container::Dict$has()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="keys">}\href{../../container/html/Dict.html#method-keys}{\code{container::Dict$keys()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="names">}\href{../../container/html/Dict.html#method-names}{\code{container::Dict$names()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="peek">}\href{../../container/html/Dict.html#method-peek}{\code{container::Dict$peek()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="pop">}\href{../../container/html/Dict.html#method-pop}{\code{container::Dict$pop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="popitem">}\href{../../container/html/Dict.html#method-popitem}{\code{container::Dict$popitem()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="remove">}\href{../../container/html/Dict.html#method-remove}{\code{container::Dict$remove()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="sort">}\href{../../container/html/Dict.html#method-sort}{\code{container::Dict$sort()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-nrow"></a>}}
\if{latex}{\out{\hypertarget{method-nrow}{}}}
\subsection{Method \code{nrow()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$nrow()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ncol"></a>}}
\if{latex}{\out{\hypertarget{method-ncol}{}}}
\subsection{Method \code{ncol()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$ncol()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rownames"></a>}}
\if{latex}{\out{\hypertarget{method-rownames}{}}}
\subsection{Method \code{rownames()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$rownames()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$new(x = list())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$add(key, value)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set"></a>}}
\if{latex}{\out{\hypertarget{method-set}{}}}
\subsection{Method \code{set()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$set(key, value, add = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$update(other = Dict.frame$new())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
