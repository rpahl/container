% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dict.frame.R
\name{Dict.frame}
\alias{Dict.frame}
\title{A Dict.frame class}
\description{
The \code{\link[=Dict.frame]{Dict.frame()}} is a mix of a dictionary and a
\code{data.frame}. In particular, it is a dictionary thereby inheriting all
\code{\link[=Dict]{Dict()}} methods, but where each element has the same length. In contrast to
a \code{\link[base:data.frame]{base::data.frame()}}, a \code{\link[=Dict.frame]{Dict.frame()}} can contain arbitrary complex
objects.
}
\seealso{
\code{\link[=Dict]{Dict()}}, \code{\link[=dict.frame]{dict.frame()}}, \code{\link[base:data.frame]{base::data.frame()}}
}
\author{
Roman Pahl
}
\section{Super classes}{
\code{\link[container:Iterable]{container::Iterable}} -> \code{\link[container:Container]{container::Container}} -> \code{\link[container:Dict]{container::Dict}} -> \code{Dict.frame}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Dict.frame$new()}}
\item \href{#method-ncol}{\code{Dict.frame$ncol()}}
\item \href{#method-nrow}{\code{Dict.frame$nrow()}}
\item \href{#method-print}{\code{Dict.frame$print()}}
\item \href{#method-rownames}{\code{Dict.frame$rownames()}}
\item \href{#method-set}{\code{Dict.frame$set()}}
\item \href{#method-set_rownames}{\code{Dict.frame$set_rownames()}}
\item \href{#method-clone}{\code{Dict.frame$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Iterable" data-id="iter">}\href{../../container/html/Iterable.html#method-iter}{\code{container::Iterable$iter()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="apply">}\href{../../container/html/Container.html#method-apply}{\code{container::Container$apply()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="clear">}\href{../../container/html/Container.html#method-clear}{\code{container::Container$clear()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="empty">}\href{../../container/html/Container.html#method-empty}{\code{container::Container$empty()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="size">}\href{../../container/html/Container.html#method-size}{\code{container::Container$size()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="type">}\href{../../container/html/Container.html#method-type}{\code{container::Container$type()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="values">}\href{../../container/html/Container.html#method-values}{\code{container::Container$values()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="add">}\href{../../container/html/Dict.html#method-add}{\code{container::Dict$add()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="discard">}\href{../../container/html/Dict.html#method-discard}{\code{container::Dict$discard()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="get">}\href{../../container/html/Dict.html#method-get}{\code{container::Dict$get()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="has">}\href{../../container/html/Dict.html#method-has}{\code{container::Dict$has()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="keys">}\href{../../container/html/Dict.html#method-keys}{\code{container::Dict$keys()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="peek">}\href{../../container/html/Dict.html#method-peek}{\code{container::Dict$peek()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="pop">}\href{../../container/html/Dict.html#method-pop}{\code{container::Dict$pop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="popitem">}\href{../../container/html/Dict.html#method-popitem}{\code{container::Dict$popitem()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="remove">}\href{../../container/html/Dict.html#method-remove}{\code{container::Dict$remove()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="sort">}\href{../../container/html/Dict.html#method-sort}{\code{container::Dict$sort()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Dict" data-id="update">}\href{../../container/html/Dict.html#method-update}{\code{container::Dict$update()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\code{Dict.frame} constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$new(x = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{initial elements put into the \code{Dict}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Dict.frame}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ncol"></a>}}
\if{latex}{\out{\hypertarget{method-ncol}{}}}
\subsection{Method \code{ncol()}}{
Number of columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$ncol()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{integer} number of columns
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-nrow"></a>}}
\if{latex}{\out{\hypertarget{method-nrow}{}}}
\subsection{Method \code{nrow()}}{
Number of rows
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$nrow()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{integer} number of rows
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
If possible, object is printed as \code{\link[base:data.frame]{base::data.frame()}}
with \code{len} rows, otherwise as structure using \code{\link[utils:str]{utils::str()}}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$print(len = 10L, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{len}}{\code{integer} number of rows or elements shown}

\item{\code{...}}{other arguments passed to print method}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rownames"></a>}}
\if{latex}{\out{\hypertarget{method-rownames}{}}}
\subsection{Method \code{rownames()}}{
Row names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$rownames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the row names of the \code{\link[=Dict.frame]{Dict.frame()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set"></a>}}
\if{latex}{\out{\hypertarget{method-set}{}}}
\subsection{Method \code{set()}}{
Overrides \code{value} at \code{key} if \code{key} is already in the
\code{Dict.frame}. If \code{key} not in \code{Dict.frame}, an error is thrown
unless \code{add} was set to \code{TRUE}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$set(key, value, add = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{\code{character} name of key.}

\item{\code{value}}{the value to be set}

\item{\code{add}}{\code{logical} if \code{TRUE} the value is set regardless whether
\code{key} already exists in \code{Dict.frame}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Dict.frame} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_rownames"></a>}}
\if{latex}{\out{\hypertarget{method-set_rownames}{}}}
\subsection{Method \code{set_rownames()}}{
set row names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$set_rownames(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{\code{numeric} or \code{character} vector of names}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Dict.frame} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict.frame$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
