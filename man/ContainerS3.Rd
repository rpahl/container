% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ContainerS3.R, R/IteratorS3.R,
%   R/Ops-arithmetic.R, R/add.R, R/clear.R, R/clone.R, R/count.R, R/delete.R,
%   R/discard.R, R/has.R, R/is_empty.R, R/peekitem.R, R/replace.R
\name{ContainerS3}
\alias{ContainerS3}
\alias{container}
\alias{as.container}
\alias{is.container}
\alias{as.list.Container}
\alias{length.Container}
\alias{names.Container}
\alias{iter.Container}
\alias{+.Container}
\alias{-.Container}
\alias{add.Container}
\alias{clear.Container}
\alias{clone.Container}
\alias{count.Container}
\alias{delete.Container}
\alias{discard.Container}
\alias{has.Container}
\alias{is_empty.Container}
\alias{peekitem.Container}
\alias{replace.Container}
\title{Container methods}
\usage{
container(...)

as.container(x)

is.container(x)

## S3 methods for class 'Container'
## --------------------------------

as.list(x)

\method{length}{Container}(x)

\method{names}{Container}(x)

\method{iter}{Container}(x)

\method{+}{Container}(x, y)

\method{-}{Container}(x, y)

add(x, ...)
add_(x, ...)

clear(x)
clear_(x)

clone(x)

count(x)

delete(x, ...)
delete_(x, ...)

discard(x, ...)
discard_(x, ...)

has(x, elem)

is_empty(x)

peekitem(x, default)

replace(x, old, new, add = FALSE)
replace_(x, old, new, add = FALSE)
}
\arguments{
\item{...}{elements to put into or remove from the \code{Container}.}

\item{x}{\code{R} object of \code{ANY} type for \code{\link[=as.container]{as.container()}} and \code{\link[=is.container]{is.container()}}
or of class \code{Container} for the \code{S3} methods.}

\item{elem}{some element of any type}

\item{old}{old element to be found and replaced.}

\item{new}{the new element replacing the old one.}
}
\description{
A \code{\link[=Container]{Container()}} is a data structure with typical member
functions to insert, delete and access elements from the container
object. Since the \code{\link[=Container]{Container()}} class mainly serves as the
base class for \code{\link[=Deque]{Deque()}}, \code{\link[=Set]{Set()}}, and \code{\link[=Dict]{Dict()}} objects, users are more
likley to use the corresponding \link[=Deque]{deque()}, \link[=Set]{set()}, and \link[=Dict]{dict()} methods to
create objects of these classes.
}
\details{
Methods that alter \code{Container} objects usually come in two versions
providing either copy or reference semantics where the latter are visible
by an underscore appended to the standard function name, for example,
\code{add} and \code{add_}.
\subsection{Methods}{
}

\itemize{
\item \code{container(...)} initializes and returns a \code{\link[=Container]{Container()}} object.
}

\itemize{
\item \code{as.container(x)} coerces \code{x} to a container.
}

\itemize{
\item \code{is.container(x)} returns \code{TRUE} if \code{x} is of class \code{Container}
and \code{FALSE} otherwise.
}

\itemize{
\item \code{as.list(x)} converts container \code{x} to a base \code{R} list. All of
the container's elements will copied (deeply) during the conversion.
}

\itemize{
\item \code{length(x)} returns the number of elements contained in \code{x}.
}

\itemize{
\item \code{names(x)} returns the names of the elements contained in \code{x}.
}

\itemize{
\item \code{x + y} combines \code{x} and \code{y} into a new container by appending \code{y}
to \code{x}.
}

\itemize{
\item \code{x - y} element-wise discards all items of \code{y} from \code{x}, given
the element was contained in \code{x}. The result is always a container.
}

\itemize{
\item \code{add(x, ...)} and \code{add_(x, ...)} add elements to \code{x}.
}

\itemize{
\item \code{clear(x)} and \code{clear_(x)} remove all elements from \code{x}.
}

\itemize{
\item clone(x) create a copy of \code{x}.
}

\itemize{
\item \code{count(x, elem)} count how often \code{elem} occurs in \code{x}.
}

\itemize{
\item \code{delete(x, ...)} and \code{delete_(x, ...)} find and remove elements.
If one or more elements don't exist, an error is signaled.
}

\itemize{
\item \code{discard(x, ...)} and \code{discard_(x, ...)} find and discard elements.
Elements that don't exist, are ignored.
}

\itemize{
\item \code{has(x, elem)} \code{TRUE} if element is in \code{x} and otherwise \code{FALSE}.
}

\itemize{
\item \code{is_empty(x)} \code{TRUE} if object is empty otherwise \code{FALSE}
}

\itemize{
\item \code{peekitem(x, default = NULL)} peek at random element. If \code{x} is empty,
return \code{default}.
}

\itemize{
\item \code{replace(x, old, new, add = FALSE)} and \code{replace_(x, ...)} try to find
element \code{old} and replace it with element \code{new}. If \code{old} does not exist,
an error is raised, unless \code{add} was set to \code{TRUE}.
}
}
\examples{

co = container(1)
add(co, 1, b = 2, c = container(1:3))

s = setnew(1)
add(s, 1, 1, b = 2, "1", co = container(1, 1))

co = container(1, 2, mean)
clear(co)
co
clear_(co)
co

co = container(1, 2, 3)
co2 = clone(co)

co = container("a", "b", "a", mean, mean)
count(co, "a")
count(co, mean)
count(co, "c")

s = setnew("a", 1:3, iris)
print(s)
delete(s, 1:3, "a")
delete(s, iris)
\dontrun{
delete(s, "b")   # "b" is not in Set}
discard(s, "b")  # ok - command is ignored

co = container(1, 2, mean)
has(co, 1)                   # TRUE
has(co, mean)                # TRUE
has(co, 1:2)                 # FALSE

co = container(1, 2)
is_empty(co)
is_empty(co$clear())

co = container(1, 2, 3)
peekitem(co)
peekitem(container(), default = 9)

co = container("x", 9)
replace(co, 9, 0)
replace(co, "x", 0)
\dontrun{
replace(co, "z", 0)              # old element ("z") is not in Container}
replace(co, "z", 0, add = TRUE)  # ok, adds the element
}
\seealso{
For the \code{Container} class documentation see \code{\link[=Container]{Container()}}.
}
