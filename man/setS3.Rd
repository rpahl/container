% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/0-SetS3.R, R/GroupGenericMath.R,
%   R/GroupGenericSummary.R, R/Ops-arithmetic.R, R/Ops-logic.R
\name{SetS3}
\alias{SetS3}
\alias{setnew}
\alias{as.set}
\alias{is.set}
\alias{OpsMath}
\alias{OpsSummary}
\alias{+.Set}
\alias{-.Set}
\alias{&.Set}
\alias{|.Set}
\title{Set methods}
\usage{
setnew(...)

as.set(x)

is.set(x)

\method{+}{Set}(x, y)

\method{-}{Set}(x, y)

\method{&}{Set}(x, y)

\method{|}{Set}(x, y)
}
\arguments{
\item{...}{initial elements put into the \code{Set}.}

\item{x}{\code{R} object of \code{ANY} type for \code{\link[=as.set]{as.set()}} and \code{\link[=is.set]{is.set()}}
or of class \code{Set} for the \code{S3} methods.}
}
\description{
The \code{\link[=Set]{Set()}} is considered and implemented as a specialized
\code{\link[=Container]{Container()}}, that is, \code{Set} elements are always unique. It provides
typical set operations such as \code{union} and \code{intersect}.
}
\details{
Under the hood, elements of a set object are stored in a hash-table
and sorted, first considering the length and, in case of a ties, a
lexicographical representation of the elements.
For a description of basic methods such as adding and removing elements,
see the help of \code{\link[=container]{container()}}.
\subsection{Methods}{
}

\itemize{
\item \code{setnew(...)} initializes and returns a \code{\link[=Set]{Set()}} object.
}

\itemize{
\item \code{as.set(x)} coerces \code{x} to a set.
}

\itemize{
\item \code{is.set(x)} returns \code{TRUE} if \code{x} is of class \code{Set} and \code{FALSE}
otherwise.
}

\itemize{
\item \code{x} \code{&} \code{y} performs the set intersection of x and y
}

\itemize{
\item \code{x} \code{|} \code{y} performs the set union of x and y
}
}
\examples{
s = setnew(1, b = NA, 1:3, c = container("a", 1))
is.set(s)
print(s)
length(s)
names(s)
as.list(s)
unpack(s)   # flatten recursively similar to unlist


# Math
set.seed(123)
s = as.set(rnorm(3))
abs(s)
cumsum(s)
round(s)
exp(s)

# Summary
range(s)
min(s)
max(s)

s1 = setnew(1, 1:2)
s2 = setnew(2, 1:2)
s1 + s2     # same as s1 | s2 or c(c1, s2)
s2 + s1     # same

s1 - s2
s2 - s1

s1 = setnew(1, b = 2)
s2 = setnew(1, b = 4)
s1 & s2     # {1}

s1 | s2     # {1, b = 2, b = 4}

}
\seealso{
See \code{\link[=container]{container()}} for all inherited methods. For the full class
documentation see \code{\link[=Set]{Set()}} and it's superclass \link[=container]{Container()}.
}
