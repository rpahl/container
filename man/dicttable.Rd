% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/0-dict.table.R, R/add.R, R/clear.R
\name{dicttable}
\alias{dicttable}
\alias{dict.table}
\alias{as.dict.table}
\alias{as.dict.table.data.table}
\alias{rbind.dict.table}
\alias{cbind.dict.table}
\title{Combining dict and data.table}
\usage{
dict.table(...)

as.dict.table(x, ...)

\method{as.dict.table}{data.table}(x, copy = TRUE, ...)

\method{rbind}{dict.table}(x, ...)

\method{cbind}{dict.table}(x, ...)
}
\arguments{
\item{...}{elements put into the \href{dicttable}{dict.table} and/or additional
arguments to be passed on.}

\item{x}{any \code{R} object or a \href{dicttable}{dict.table} object.}

\item{copy}{if \code{TRUE} creates a copy of the \link{data.table} object otherwise
works on the passed object by reference.}
}
\description{
The \href{dicttable}{dict.table} is a combination of \link{dict} and
\link{data.table} and basically can be considered a \link{data.table} with extended
functionality to manage its data columns in a stricter way. For example,
in contrast to \link{data.table}, \href{dicttable}{dict.table} does not allow
duplicated column names.
A \href{dicttable}{dict.table} object provides all \link{dict} and \link{data.table}
functions and operators at the same time.
}
\details{
Methods that alter \href{dicttable}{dict.table} objects usually come in two versions
providing either copy or reference semantics where the latter start with
\code{'ref_'} to note the reference semantic, for example, \link{add} and \link{ref_add}.

\itemize{
\item \code{dict.table(...)} initializes and returns a \link{dict} object.
}

\itemize{
\item \code{as.dict.table(x, ...)} coerce \code{x} to a \link{dict.table}
}

\itemize{
\item \code{add(.x, ...)} and \code{ref_add(.x, ...)} add columns to \code{.x}. If the column name
already exists, an error is given.
}

\itemize{
\item \code{clear(x)} and \code{ref_clear(x)} remove all elements from \code{x}.
}
}
\examples{
# Some basic examples using some typical data.table and dict operations.
# The constructor can take the 'key' argument known from data.table():
require(data.table)
dit = dict.table(x = rep(c("b","a","c"), each = 3), y = c(1,3,6), key = "y")
print(dit)
setkey(dit, "x")                             # sort by 'x'
print(dit)
(add(dit, "v" = 1:9))                        # add column v = 1:9
dit[y > 5]
(ref_discard_at(dit, "x"))                   # discard column 'x'

\dontrun{
at(dit, "x")                                 # index 'x' not found
replace_at(dit, x = 0)                       # cannot be replaced, if it does not exist
}

dit = replace_at(dit, x = 0, .add = TRUE)    # ok - re-adds column 'x' with all 0s
peek_at(dit, "x")                            # glance at column 'x'
has_name(dit, "x")                           # TRUE
ref_pop(dit, "x")                            # get column and remove it
has_name(dit, "x")                           # FALSE


# Copy and reference semantics when coercing *from* a data.table
dat = data.table(a = 1, b = 2)
dit = as.dict.table(dat)
is.dict.table(dit)                           # TRUE
is.dict.table(dat)                           # FALSE
ref_replace_at(dit, "a", 9)
dit[["a"]]                                   # 9
dat[["a"]]                                   # 1
dit.dat = as.dict.table(dat, copy = FALSE)   # init by reference
ref_replace_at(dit.dat, "a", 9)
dat[["a"]]                                   # 9
is.dict.table(dit.dat)                       # TRUE
is.dict.table(dat)                           # TRUE now as well!

# Coerce from dict
d = dict(a = 1, b = 1:3)
as.dict.table(d)

dit = dict.table(a = 1:2, b = 1:2)
rbind(dit, dit)

# rbind ...
dit = dict.table(a = 1:2, b = 1:2)
rbind(dit, dit)

# ... can be mixed with data.tables
dat = data.table(a = 3:4, b = 3:4)
rbind(dit, dat)  # yields a dict.table
rbind(dat, dit)  # yields a data.table

# cbind ...
dit = dict.table(a = 1:2, b = 1:2)
dit2 = dict.table(c = 3:4, d = 5:6)
cbind(dit, dit2)

# ... can be mixed with data.tables
dat = data.table(x = 3:4, y = 3:4)
cbind(dit, dat)

dit = dict.table(a = 1:3)
add(dit, b = 3:1, d = 4:6)

\dontrun{
add(dit, a = 7:9)  # column 'a' already exists
}

dit = dict.table(a = 1, b = 2)
clear(dit)
dit
ref_clear(dit)
dit
}
\seealso{
\link{dict}, \link{data.table}
}
