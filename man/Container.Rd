% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ContainerR6.R
\docType{class}
\name{Container}
\alias{Container}
\title{A sequence Container}
\description{
This class implements a container data structure with typical
member functions to insert, delete and access elements from the container.
While it can be used to create \code{\link[=Container]{Container()}} objects, it mainly serves as the
base class for \code{\link[=Deque]{Deque()}}, \code{\link[=Set]{Set()}}, and \code{\link[=Dict]{Dict()}}.
}
\seealso{
\code{\link[=Iterable]{Iterable()}}, \code{\link[=Deque]{Deque()}}, \code{\link[=Set]{Set()}}, and \code{\link[=Dict]{Dict()}}
}
\author{
Roman Pahl
}
\section{Super class}{
\code{\link[container:Iterable]{container::Iterable}} -> \code{Container}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Container$new()}}
\item \href{#method-add}{\code{Container$add()}}
\item \href{#method-clear}{\code{Container$clear()}}
\item \href{#method-count}{\code{Container$count()}}
\item \href{#method-delete}{\code{Container$delete()}}
\item \href{#method-discard}{\code{Container$discard()}}
\item \href{#method-empty}{\code{Container$empty()}}
\item \href{#method-get_compare_fun}{\code{Container$get_compare_fun()}}
\item \href{#method-has}{\code{Container$has()}}
\item \href{#method-length}{\code{Container$length()}}
\item \href{#method-peekitem}{\code{Container$peekitem()}}
\item \href{#method-popitem}{\code{Container$popitem()}}
\item \href{#method-print}{\code{Container$print()}}
\item \href{#method-replace}{\code{Container$replace()}}
\item \href{#method-remove}{\code{Container$remove()}}
\item \href{#method-size}{\code{Container$size()}}
\item \href{#method-type}{\code{Container$type()}}
\item \href{#method-values}{\code{Container$values()}}
\item \href{#method-clone}{\code{Container$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Iterable" data-id="iter">}\href{../../container/html/Iterable.html#method-iter}{\code{container::Iterable$iter()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{initial elements put into the \code{Container}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
add element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$add(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{elements to be added to the \code{Container}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear"></a>}}
\if{latex}{\out{\hypertarget{method-clear}{}}}
\subsection{Method \code{clear()}}{
delete all elements from the \code{Container}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$clear()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the cleared \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-count"></a>}}
\if{latex}{\out{\hypertarget{method-count}{}}}
\subsection{Method \code{count()}}{
Count number of element occurences.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$count(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be counted.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{integer} number of \code{elem} occurences in the \code{\link[=Container]{Container()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete"></a>}}
\if{latex}{\out{\hypertarget{method-delete}{}}}
\subsection{Method \code{delete()}}{
Search for occurence(s) of \code{elem} in \code{Container} and
remove first one that is found. If \code{elem} does not exist, an error
is signaled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$delete(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be removed from the \code{Container}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-discard"></a>}}
\if{latex}{\out{\hypertarget{method-discard}{}}}
\subsection{Method \code{discard()}}{
Search for occurence(s) of \code{elem} in \code{Container} and
remove first one that is found.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$discard(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be discarded from the \code{Container}. If not
found, the operation is ignored and the object is \emph{not} altered.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-empty"></a>}}
\if{latex}{\out{\hypertarget{method-empty}{}}}
\subsection{Method \code{empty()}}{
Check whether \code{Container} is empty
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$empty()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if the \code{Container} is empty else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_compare_fun"></a>}}
\if{latex}{\out{\hypertarget{method-get_compare_fun}{}}}
\subsection{Method \code{get_compare_fun()}}{
Get comparison function used internally by the
\code{Container} object to compare elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$get_compare_fun()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has"></a>}}
\if{latex}{\out{\hypertarget{method-has}{}}}
\subsection{Method \code{has()}}{
Determine if \code{Container} has some element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$has(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to search for}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if \code{Container} contains \code{elem} else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-length"></a>}}
\if{latex}{\out{\hypertarget{method-length}{}}}
\subsection{Method \code{length()}}{
Number of elements of the \code{Container}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$length()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{integer} length of the \code{Container}, that is, the number of
elements it contains.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peekitem"></a>}}
\if{latex}{\out{\hypertarget{method-peekitem}{}}}
\subsection{Method \code{peekitem()}}{
peek random item
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$peekitem()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
returns an arbitrary element from the \code{Container}. This
function can be used to sample randomly (with replacement) from
a \code{Container}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-popitem"></a>}}
\if{latex}{\out{\hypertarget{method-popitem}{}}}
\subsection{Method \code{popitem()}}{
pop random item
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$popitem()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
deletes and return an arbitrary element from the
\code{Container}. This function can be used to destructively iterate
over a \code{Container} as often used in set algorithms.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print object representation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{further arguments passed to \code{\link[=format]{format()}}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-replace"></a>}}
\if{latex}{\out{\hypertarget{method-replace}{}}}
\subsection{Method \code{replace()}}{
Replace one element by another element.
Search for occurence of \code{old} in \code{Container} and, if found,
replace it by \code{new}. If \code{old} does not exist, an error is
signaled, unless \code{add} was set to \code{TRUE}, in which case \code{new} is
added.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$replace(old, new, add = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{old}}{element to be replaced}

\item{\code{new}}{element to be put instead of old}

\item{\code{add}}{\code{logical} if \code{TRUE} the \code{new} element is added in case
\code{old} does not exists.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\if{latex}{\out{\hypertarget{method-remove}{}}}
\subsection{Method \code{remove()}}{
This function is deprecated. Use \code{\link[=delete]{delete()}} instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$remove(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be deleted from the \code{Container}. If element
is not found in the \code{Container}, an error is signaled.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-size"></a>}}
\if{latex}{\out{\hypertarget{method-size}{}}}
\subsection{Method \code{size()}}{
This function is deprecated. Use \code{\link[=length]{length()}} instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the \code{Container} length
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-type"></a>}}
\if{latex}{\out{\hypertarget{method-type}{}}}
\subsection{Method \code{type()}}{
This function is deprecated and of no real use anymore.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$type()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
type (or mode) of internal vector containing the elements
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-values"></a>}}
\if{latex}{\out{\hypertarget{method-values}{}}}
\subsection{Method \code{values()}}{
Get \code{Container} values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$values()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
elements of the container as a base list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
