% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Container.R
\docType{class}
\name{Container}
\alias{Container}
\title{A sequence container}
\description{
This class implements a container data structure with typical
member functions to insert, delete and access objects from the container.
While it can be used to create \code{\link[=Container]{Container()}} objects, it mainly serves as the
base class for \code{\link[=Deque]{Deque()}}, \code{\link[=Set]{Set()}}, and \code{\link[=Dict]{Dict()}}.
}
\details{
The underlying data structure is based on R vectors (or lists), with the mode
being set to the mode (or type) of the value passed to the initialize
function, which by default is an empty list, in which case the
\code{\link[=Container]{Container()}} object can store objects of mixed and arbitrary types.
If the container will only contain objects of one particular type, for
example, numeric values, it will be both more efficient and type safe to
initialize the container with this particular type.
}
\seealso{
\code{\link[=Iterable]{Iterable()}}, \code{\link[=Deque]{Deque()}}, \code{\link[=Set]{Set()}}, and \code{\link[=Dict]{Dict()}}
}
\author{
Roman Pahl
}
\section{Super class}{
\code{\link[container:Iterable]{container::Iterable}} -> \code{Container}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Container$new()}}
\item \href{#method-add}{\code{Container$add()}}
\item \href{#method-clear}{\code{Container$clear()}}
\item \href{#method-delete}{\code{Container$delete()}}
\item \href{#method-discard}{\code{Container$discard()}}
\item \href{#method-empty}{\code{Container$empty()}}
\item \href{#method-has}{\code{Container$has()}}
\item \href{#method-print}{\code{Container$print()}}
\item \href{#method-remove}{\code{Container$remove()}}
\item \href{#method-size}{\code{Container$size()}}
\item \href{#method-type}{\code{Container$type()}}
\item \href{#method-values}{\code{Container$values()}}
\item \href{#method-clone}{\code{Container$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Iterable" data-id="iter">}\href{../../container/html/Iterable.html#method-iter}{\code{container::Iterable$iter()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$new(..., keep_names = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{initial elements put into the \code{Container}}

\item{\code{keep_names}}{\code{logical} if TRUE, keeps names of passed elements}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
add element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$add(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be added to \code{Container} object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear"></a>}}
\if{latex}{\out{\hypertarget{method-clear}{}}}
\subsection{Method \code{clear()}}{
delete all elements from the \code{Container}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$clear()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
invisibly returns the cleared \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete"></a>}}
\if{latex}{\out{\hypertarget{method-delete}{}}}
\subsection{Method \code{delete()}}{
Find and delete element from \code{Container}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$delete(elem, right = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be deleted from the \code{Container}. If element
is not found in the \code{Container}, an error is signaled.}

\item{\code{right}}{\code{logical} if \code{TRUE}, search from right to left.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-discard"></a>}}
\if{latex}{\out{\hypertarget{method-discard}{}}}
\subsection{Method \code{discard()}}{
Search for first \code{elem} in \code{Container} and, if found,
delete it. If not found, the \code{Container} object is not altered.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$discard(elem, right = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be discarded.}

\item{\code{right}}{\code{logical} if \code{TRUE}, search from right to left.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-empty"></a>}}
\if{latex}{\out{\hypertarget{method-empty}{}}}
\subsection{Method \code{empty()}}{
Check whether \code{Container} is empty
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$empty()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if the \code{Container} is empty else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has"></a>}}
\if{latex}{\out{\hypertarget{method-has}{}}}
\subsection{Method \code{has()}}{
Determine if \code{Container} has some element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$has(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to search for}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} of \code{Container} contains \code{elem} else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print object representation similar to \code{\link[utils:str]{utils::str()}}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$print(list.len = 10L, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{list.len}}{\code{integer} maximum number of elements to display}

\item{\code{...}}{other arguments passed to \code{\link[utils:str]{utils::str()}}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\if{latex}{\out{\hypertarget{method-remove}{}}}
\subsection{Method \code{remove()}}{
Find and remove element from \code{Container}. This
function does the same as \code{delete} and is only kept for backwards
compatibility.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$remove(elem, right = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be deleted from the \code{Container}. If element
is not found in the \code{Container}, an error is signaled.}

\item{\code{right}}{\code{logical} if \code{TRUE}, search from right to left.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-size"></a>}}
\if{latex}{\out{\hypertarget{method-size}{}}}
\subsection{Method \code{size()}}{
Size of the \code{Container}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the \code{Container} size
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-type"></a>}}
\if{latex}{\out{\hypertarget{method-type}{}}}
\subsection{Method \code{type()}}{
This function is deprecated.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$type()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
type (or mode) of internal vector containing the elements
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-values"></a>}}
\if{latex}{\out{\hypertarget{method-values}{}}}
\subsection{Method \code{values()}}{
Get copy of \code{Container} values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$values()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a copy of all elements in the same format as they are stored
in the \code{Container} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
