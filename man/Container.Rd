% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/0-ContainerR6.R
\docType{class}
\name{Container}
\alias{Container}
\title{A sequence Container}
\description{
This class implements a container data structure with typical
member functions to insert, delete and access elements from the container.
While it can be used to create \code{\link[=Container]{Container()}} objects, it also serves as the
base class for \code{\link[=Deque]{Deque()}}, \code{\link[=Set]{Set()}}, and \code{\link[=Dict]{Dict()}}.
}
\seealso{
\code{\link[=Iterable]{Iterable()}}, \code{\link[=Deque]{Deque()}}, \code{\link[=Set]{Set()}}, and \code{\link[=Dict]{Dict()}}
}
\author{
Roman Pahl
}
\section{Super class}{
\code{\link[container:Iterable]{container::Iterable}} -> \code{Container}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Container$new()}}
\item \href{#method-add}{\code{Container$add()}}
\item \href{#method-at}{\code{Container$at()}}
\item \href{#method-at2}{\code{Container$at2()}}
\item \href{#method-clear}{\code{Container$clear()}}
\item \href{#method-count}{\code{Container$count()}}
\item \href{#method-delete}{\code{Container$delete()}}
\item \href{#method-delete_at}{\code{Container$delete_at()}}
\item \href{#method-discard}{\code{Container$discard()}}
\item \href{#method-discard_at}{\code{Container$discard_at()}}
\item \href{#method-empty}{\code{Container$empty()}}
\item \href{#method-get_compare_fun}{\code{Container$get_compare_fun()}}
\item \href{#method-has}{\code{Container$has()}}
\item \href{#method-has_name}{\code{Container$has_name()}}
\item \href{#method-is_empty}{\code{Container$is_empty()}}
\item \href{#method-length}{\code{Container$length()}}
\item \href{#method-peek_at}{\code{Container$peek_at()}}
\item \href{#method-peek_at2}{\code{Container$peek_at2()}}
\item \href{#method-pop}{\code{Container$pop()}}
\item \href{#method-print}{\code{Container$print()}}
\item \href{#method-replace}{\code{Container$replace()}}
\item \href{#method-replace_at}{\code{Container$replace_at()}}
\item \href{#method-remove}{\code{Container$remove()}}
\item \href{#method-size}{\code{Container$size()}}
\item \href{#method-type}{\code{Container$type()}}
\item \href{#method-update}{\code{Container$update()}}
\item \href{#method-values}{\code{Container$values()}}
\item \href{#method-clone}{\code{Container$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Iterable" data-id="iter">}\href{../../container/html/Iterable.html#method-iter}{\code{container::Iterable$iter()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{initial elements put into the \code{Container}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
add element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$add(value, name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{value of \code{ANY} type to be added to the \code{Container}.}

\item{\code{name}}{\code{character} optional name attribute of the value.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-at"></a>}}
\if{latex}{\out{\hypertarget{method-at}{}}}
\subsection{Method \code{at()}}{
Same as \code{at2} (see below) but accepts a vector of
indices and always returns a \code{Container} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$at(index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{vector of indices.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{Container} object with the extracted elements.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-at2"></a>}}
\if{latex}{\out{\hypertarget{method-at2}{}}}
\subsection{Method \code{at2()}}{
Extract value at index. If index is invalid or not
found, an error is signaled. If given as a string, the element
matching the name is returned. If there are two or more identical
names, the value of the first match (i.e. \emph{leftmost} element) is
returned.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$at2(index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{Must be a single number > 0 or a string.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If given as a number, the element at the corresponding
position, and if given as a string, the element at the
corresponding name matching the given string is returned.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear"></a>}}
\if{latex}{\out{\hypertarget{method-clear}{}}}
\subsection{Method \code{clear()}}{
delete all elements from the \code{Container}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$clear()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the cleared \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-count"></a>}}
\if{latex}{\out{\hypertarget{method-count}{}}}
\subsection{Method \code{count()}}{
Count number of element occurences.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$count(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be counted.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{integer} number of \code{elem} occurences in the \code{\link[=Container]{Container()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete"></a>}}
\if{latex}{\out{\hypertarget{method-delete}{}}}
\subsection{Method \code{delete()}}{
Search for occurence(s) of \code{elem} in \code{Container} and
remove first one that is found. If \code{elem} does not exist, an error
is signaled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$delete(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be removed from the \code{Container}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete_at"></a>}}
\if{latex}{\out{\hypertarget{method-delete_at}{}}}
\subsection{Method \code{delete_at()}}{
Delete value at given index. If index is not found, an
error is signaled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$delete_at(index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{\code{character} or \code{numeric} index}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-discard"></a>}}
\if{latex}{\out{\hypertarget{method-discard}{}}}
\subsection{Method \code{discard()}}{
Search for occurence(s) of \code{elem} in \code{Container} and
remove first one that is found.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$discard(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be discarded from the \code{Container}. If not
found, the operation is ignored and the object is \emph{not} altered.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-discard_at"></a>}}
\if{latex}{\out{\hypertarget{method-discard_at}{}}}
\subsection{Method \code{discard_at()}}{
Discard value at given index. If index is not found,
the operation is ignored.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$discard_at(index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{\code{character} or \code{numeric} index}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-empty"></a>}}
\if{latex}{\out{\hypertarget{method-empty}{}}}
\subsection{Method \code{empty()}}{
This function is deprecated. Use \code{\link[=is_empty]{is_empty()}} instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$empty()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_compare_fun"></a>}}
\if{latex}{\out{\hypertarget{method-get_compare_fun}{}}}
\subsection{Method \code{get_compare_fun()}}{
Get comparison function used internally by the
\code{Container} object to compare elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$get_compare_fun()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has"></a>}}
\if{latex}{\out{\hypertarget{method-has}{}}}
\subsection{Method \code{has()}}{
Determine if \code{Container} has some element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$has(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to search for}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if \code{Container} contains \code{elem} else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has_name"></a>}}
\if{latex}{\out{\hypertarget{method-has_name}{}}}
\subsection{Method \code{has_name()}}{
Determine if \code{Container} object contains an element
with the given name. If called with no argument, the function
determines whether \emph{any} element is named.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$has_name(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{\code{character} the name}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if \code{Container} has the \code{name} otherwise \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_empty"></a>}}
\if{latex}{\out{\hypertarget{method-is_empty}{}}}
\subsection{Method \code{is_empty()}}{
Check if \code{Container} is empty
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$is_empty()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if the \code{Container} is empty else \code{FALSE}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-length"></a>}}
\if{latex}{\out{\hypertarget{method-length}{}}}
\subsection{Method \code{length()}}{
Number of elements of the \code{Container}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$length()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{integer} length of the \code{Container}, that is, the number of
elements it contains.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peek_at"></a>}}
\if{latex}{\out{\hypertarget{method-peek_at}{}}}
\subsection{Method \code{peek_at()}}{
Same as \code{peek_at2} (see below) but accepts a vector of
indices and always returns a \code{Container} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$peek_at(index, default = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{vector of indices.}

\item{\code{default}}{the default value to return in case the value at
\code{index} is not found.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{Container} object with the extracted elements.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peek_at2"></a>}}
\if{latex}{\out{\hypertarget{method-peek_at2}{}}}
\subsection{Method \code{peek_at2()}}{
Peek at index and extract value. If index is invalid,
missing, or not not found, return \code{default} value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$peek_at2(index, default = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{\code{numeric} or \code{character} index to be accessed.}

\item{\code{default}}{the default value to return in case the value at
\code{index} is not found.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the value at the given index or (if not found) the given
default value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-pop"></a>}}
\if{latex}{\out{\hypertarget{method-pop}{}}}
\subsection{Method \code{pop()}}{
Get value at index and remove it from \code{Container}.
If \code{index} is not found, raise an error.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$pop(index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{Must be a single number > 0 or a string.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If given as a number, the element at the corresponding
position, and if given as a string, the element at the
corresponding name matching the given string is returned.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print object representation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{further arguments passed to \code{\link[=format]{format()}}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-replace"></a>}}
\if{latex}{\out{\hypertarget{method-replace}{}}}
\subsection{Method \code{replace()}}{
Replace one element by another element.
Search for occurence of \code{old} and, if found, replace it by \code{new}.
If \code{old} does not exist, an error is signaled, unless \code{add} was
set to \code{TRUE}, in which case \code{new} is added.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$replace(old, new, add = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{old}}{element to be replaced}

\item{\code{new}}{element to be put instead of old}

\item{\code{add}}{\code{logical} if \code{TRUE} the \code{new} element is added in case
\code{old} does not exists.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-replace_at"></a>}}
\if{latex}{\out{\hypertarget{method-replace_at}{}}}
\subsection{Method \code{replace_at()}}{
Replace value at given index.
Replace value at index by given value. If index is not found, an
error is signalled, unless \code{add} was set to \code{TRUE}, in which case
\code{new} is added.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$replace_at(index, value, add = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{\code{character} or \code{numeric} index}

\item{\code{value}}{\code{ANY} new value to replace the old one.}

\item{\code{add}}{\code{logical} if \code{TRUE} the new \code{value} element would be added
in case \code{index} did not exists.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\if{latex}{\out{\hypertarget{method-remove}{}}}
\subsection{Method \code{remove()}}{
This function is deprecated. Use \code{\link[=delete]{delete()}} instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$remove(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{element to be deleted from the \code{Container}. If element
is not found in the \code{Container}, an error is signaled.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{Container} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-size"></a>}}
\if{latex}{\out{\hypertarget{method-size}{}}}
\subsection{Method \code{size()}}{
This function is deprecated. Use \code{\link[=length]{length()}} instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the \code{Container} length
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-type"></a>}}
\if{latex}{\out{\hypertarget{method-type}{}}}
\subsection{Method \code{type()}}{
This function is deprecated and of no real use anymore.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$type()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
type (or mode) of internal vector containing the elements
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
Add elements of \code{other} to this if the name is
not in the \code{Container} and update elements with existing names.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$update(other)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{other}}{\code{Iterable} object used to update this.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns the \code{Container}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-values"></a>}}
\if{latex}{\out{\hypertarget{method-values}{}}}
\subsection{Method \code{values()}}{
Get \code{Container} values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$values()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
elements of the container as a base list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
