% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set.R
\name{Set}
\alias{Set}
\title{A Set class}
\description{
The \code{\link[=Set]{Set()}} is considered and implemented as a specialized
\code{\link[=Container]{Container()}}, that is, elements are always unique in the \code{\link[=Container]{Container()}} and
it provides typical set operations such as \code{union} and \code{intersect}.
}
\seealso{
\code{\link[=Container]{Container()}}, \code{\link[=set]{set()}}
}
\author{
Roman Pahl
}
\section{Super classes}{
\code{\link[container:Iterable]{container::Iterable}} -> \code{\link[container:Container]{container::Container}} -> \code{Set}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Set$new()}}
\item \href{#method-add}{\code{Set$add()}}
\item \href{#method-diff}{\code{Set$diff()}}
\item \href{#method-intersect}{\code{Set$intersect()}}
\item \href{#method-is.equal}{\code{Set$is.equal()}}
\item \href{#method-is.subset}{\code{Set$is.subset()}}
\item \href{#method-is.superset}{\code{Set$is.superset()}}
\item \href{#method-union}{\code{Set$union()}}
\item \href{#method-clone}{\code{Set$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Iterable" data-id="iter">}\href{../../container/html/Iterable.html#method-iter}{\code{container::Iterable$iter()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="clear">}\href{../../container/html/Container.html#method-clear}{\code{container::Container$clear()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="delete">}\href{../../container/html/Container.html#method-delete}{\code{container::Container$delete()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="discard">}\href{../../container/html/Container.html#method-discard}{\code{container::Container$discard()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="empty">}\href{../../container/html/Container.html#method-empty}{\code{container::Container$empty()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="has">}\href{../../container/html/Container.html#method-has}{\code{container::Container$has()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="print">}\href{../../container/html/Container.html#method-print}{\code{container::Container$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="remove">}\href{../../container/html/Container.html#method-remove}{\code{container::Container$remove()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="size">}\href{../../container/html/Container.html#method-size}{\code{container::Container$size()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="type">}\href{../../container/html/Container.html#method-type}{\code{container::Container$type()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="container" data-topic="Container" data-id="values">}\href{../../container/html/Container.html#method-values}{\code{container::Container$values()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\code{Set} constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{initial elements put into the \code{Set}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns the \code{Set}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
Add element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$add(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{If not already in set, add \code{elem}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly returns \code{\link[=Set]{Set()}} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-diff"></a>}}
\if{latex}{\out{\hypertarget{method-diff}{}}}
\subsection{Method \code{diff()}}{
\code{Set} difference
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$diff(s)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{s}}{\code{Set} object to 'subtract'}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{Set} being the set difference between this and s.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-intersect"></a>}}
\if{latex}{\out{\hypertarget{method-intersect}{}}}
\subsection{Method \code{intersect()}}{
\code{Set} intersection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$intersect(s)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{s}}{\code{Set} object to 'intersect'}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{Set} as a result of the intersection of this and s.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is.equal"></a>}}
\if{latex}{\out{\hypertarget{method-is.equal}{}}}
\subsection{Method \code{is.equal()}}{
\code{Set} comparison
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$is.equal(s)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{s}}{\code{Set} object to compare}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if \code{Set} s is equal to this, otherwise \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is.subset"></a>}}
\if{latex}{\out{\hypertarget{method-is.subset}{}}}
\subsection{Method \code{is.subset()}}{
Check if subset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$is.subset(s)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{s}}{\code{Set} object to check}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if \code{Set} s is subset of this, otherwise \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is.superset"></a>}}
\if{latex}{\out{\hypertarget{method-is.superset}{}}}
\subsection{Method \code{is.superset()}}{
Check if superset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$is.superset(s)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{s}}{\code{Set} object to check}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if \code{Set} s is superset of this, otherwise \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-union"></a>}}
\if{latex}{\out{\hypertarget{method-union}{}}}
\subsection{Method \code{union()}}{
\code{Set} union
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$union(s)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{s}}{\code{Set} object to 'unified'}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{Set} being the result of the union of this and s.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
