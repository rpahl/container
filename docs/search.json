[{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"robust-usage","dir":"Articles","previous_headings":"","what":"Robust usage","title":"Container operations for robust code","text":"Base R’s list operations designed interactive use, offering flexibility often overly permissive user input. convenient, can lead subtle bugs development requires additional, sometimes tedious, checks ensure code robustness. {container} package addresses challenges providing operations explicitly define intent action. prioritizing clarity precision, {container} enables write leaner reliable code right start. vignette revisits basic operations familiar base R lists demonstrates {container} enhances strict validation powerful additional features.","code":"co <- container()"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"add","dir":"Articles","previous_headings":"Robust usage","what":"Add","title":"Container operations for robust code","text":"Using base R lists notation, elements usually added name concatenation. {container} package provides add function add elements. container objects much difference two methods. Now, example don’t want allow duplicated names, can use dict objects instead. subclass container throw error case. details see reference documentation look Deque, Set, Dict vignette. Lastly, note base append function also works containers.","code":"co[[\"x\"]] <- 1 co <- c(co, 2)  co # [x = 1, 2] co <- add(co, x = 3)  # same as c(co, x = 3)  co # [x = 1, 2, x = 3] d <- dict(x = 1)  add(d, x = 3) # Error: name 'x' exists already append(co, 1.5, after = 1) # [x = 1, 1.5, 2, x = 3]"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"replace","dir":"Articles","previous_headings":"Robust usage","what":"Replace","title":"Container operations for robust code","text":"demonstrated , elements can loosely replaced index name. Also, contrast base lists, container allow add elements positions longer length object. name exist, element appended known base lists.","code":"co[[\"x\"]] <- 0 co[[2]] <- 12  co # [x = 0, 12, x = 3] co[[4]] <- 3 # Error: index out of range (length = 3): 4 co[[\"y\"]] <- 5  co # [x = 0, 12, x = 3, y = 5]"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"strict-replace","dir":"Articles","previous_headings":"Robust usage > Replace","what":"Strict replace","title":"Container operations for robust code","text":"Let’s imagine want replace element certain name, therefore expect name exists already. code development, require additional check, example: Clearly lot boilerplate code simple operation, easy forget checks. addition, end lot unit tests basically check checks. Last least, intent code clear . {container} package comes . want make sure something replaced, {container} provides function replace_at, replace elements names positions exist. following statements equal show different possibilities use replace_at. Next, let’s see invalid indices signaled. instead don’t mind elements new names added, set .add = TRUE. Invalid positional indices still signaled.","code":"name <- \"z\" if (name %in% names(co)) {   co[[name]] <- 10 } else {   stop(\"Name '\", name,  \"' does not exist.\") } replace_at(co, x = 10, y = 13)            # name = value pairs # [x = 10, 12, x = 3, y = 13]  replace_at(co, c(\"x\", \"y\"),  c(10, 13))   # names followed by values # [x = 10, 12, x = 3, y = 13]  replace_at(co, c(1, 4),      c(10, 13))   # positions followed by values # [x = 10, 12, x = 3, y = 13]  replace_at(co, list(1, \"y\"), c(10, 13))   # mixed indices followed by values # [x = 10, 12, x = 3, y = 13] replace_at(co, z = 10) # Error: names(s) not found: 'z'  replace_at(co, \"z\", 10) # Error: names(s) not found: 'z'  replace_at(co, 5, 10) # Error: index out of range (length = 4): 5 co <- replace_at(co, z = 10, .add = TRUE)   # ok  co <- replace_at(co, 7, 10, .add = TRUE) # Error: index out of range (length = 5): 7  co # [x = 0, 12, x = 3, y = 5, z = 10]"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"strict-replace-by-value","dir":"Articles","previous_headings":"Robust usage > Replace","what":"Strict replace by value","title":"Container operations for robust code","text":"also possible replace elements value, , specify value (index) replaced. see , let’s replace 12 (located 2nd postion) \"foo\" y = 5 (located 4th position) 1:2. Implementing “manually” require even additional code . intended, value exist, error signaled. , intend want replace don’t mind element added can specified:","code":"co <- replace(co, old = 12, new = \"foo\") co # [x = 0, \"foo\", x = 3, y = 5, z = 10]  co <- replace(co, old = 5, new = 1:2) co # [x = 0, \"foo\", x = 3, y = (1L 2L), z = 10] replace(co, old = \"non-existent-value\", new = \"my value\") # Error: old element (\"non-existent-value\") is not in Container replace(co, old = \"non-existent-value\", new = \"my value\", add = TRUE) # [x = 0, \"foo\", x = 3, y = (1L 2L), z = 10, \"my value\"]"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"extract","dir":"Articles","previous_headings":"Robust usage","what":"Extract","title":"Container operations for robust code","text":"Let’s recap standard extract operators.","code":"co[[1]] # [1] 0  co[[\"x\"]] # [1] 0  co[3:5] # [x = 3, y = (1L 2L), z = 10]  co[c(\"x\", \"y\", \"z\")] # [x = 0, y = (1L 2L), z = 10]"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"strict-extract","dir":"Articles","previous_headings":"Robust usage > Extract","what":"Strict extract","title":"Container operations for robust code","text":"{container} functions strictly select one multiple elements named at2 .1 can specify mixed indices via lists. Accessing non-existent names positions signaled error follows. reminded base lists non-existent indices just returned NULL values. needed, (less strict) list access can mimicked peek_at peek_at2. see, one important difference multiple access via peek_at default instead NULL values just returns nothing. However, functions allow specify custom default value returned index exist.","code":"at2(co, 1) # [1] 0  at2(co, \"x\") # [1] 0  at(co, 3:5) # [x = 3, y = (1L 2L), z = 10]  at(co, c(\"x\", \"y\", \"z\")) # [x = 0, y = (1L 2L), z = 10] indices <- list(\"x\", 4, \"z\")  at(co, indices) # [x = 0, y = (1L 2L), z = 10] at2(co, 10) # Error: index 10 exceeds length of Container, which is 5  at2(co, \"a\") # Error: index 'a' not found  at(co, 3:6) # Error: index 6 exceeds length of Container, which is 5  at(co, c(\"x\", \"a\")) # Error: index 'a' not found l <- list()  l[2:3] # [[1]] # NULL #  # [[2]] # NULL  l[[\"a\"]] # NULL co # [x = 0, \"foo\", x = 3, y = (1L 2L), z = 10]  peek_at(co, 10, 11) # []  peek_at(co, 5:10) # [z = 10]  peek_at2(co, \"a\") # NULL co # [x = 0, \"foo\", x = 3, y = (1L 2L), z = 10]  peek_at2(co, \"a\", default = -1) # [1] -1  peek_at(co, \"z\", \"a\", .default = -1) # [z = 10, a = -1]  peek_at(co, 4:8, .default = NA) # [y = (1L 2L), z = 10, NA, NA, NA]"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"remove","dir":"Articles","previous_headings":"Robust usage","what":"Remove","title":"Container operations for robust code","text":"remove elements lists, usually replaced NULL. container package done differently, replacing NULL delete element literally replace NULL. Instead, elements can deleted index (delete_at) value (delete) follows. , invalid indices missing values signaled. need less strict delete operation, use discard functions, delete valid indices values ignore rest.","code":"l <- list(a = 1)  l # $a # [1] 1  l[[\"a\"]] <- NULL  l # named list() co[[\"x\"]] <- NULL  co # [x = NULL, \"foo\", x = 3, y = (1L 2L), z = 10] co # [x = NULL, \"foo\", x = 3, y = (1L 2L), z = 10]  delete_at(co, 1, \"y\", \"z\") # [\"foo\", x = 3]  delete(co, NULL, 1:2, 10)   # same but remove by value # [\"foo\", x = 3] co # [x = NULL, \"foo\", x = 3, y = (1L 2L), z = 10]  delete_at(co, \"a\") # Error: names(s) not found: 'a'  delete_at(co, 10) # Error: index out of range (length = 5): 10  delete(co, 1:3) # Error: (1L 2L 3L) is not in Container co # [x = NULL, \"foo\", x = 3, y = (1L 2L), z = 10]  discard_at(co, 1, \"a\") # [\"foo\", x = 3, y = (1L 2L), z = 10]  discard_at(co, 1:100) # []  discard(co, NULL, 1:2, 1:3, 1:4)    # discard by value # [\"foo\", x = 3, z = 10]"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"combine-containers","dir":"Articles","previous_headings":"","what":"Combine containers","title":"Container operations for robust code","text":"update function used combine/merge two containers. container package function also provided base R lists. Note similar function utils::modifyList, , however, contrast update, “forward” unnamed elements. Also, utils::modifyList modifies list recursively changing subset elements level, update just works first level.","code":"c1 <- container(1, b = 2) c2 <- container(   b = 0, c = 3)  update(c1, c2) # [1, b = 0, c = 3]  update(c2, c1) # [b = 2, c = 3, 1] l1 <- list(1, b = 2) l2 <- list(   b = 0, c = 3)  update(l1, l2) # [[1]] # [1] 1 #  # $b # [1] 0 #  # $c # [1] 3  update(l2, l1) # $b # [1] 2 #  # $c # [1] 3 #  # [[3]] # [1] 1 modifyList(l1, l2) # [[1]] # [1] 1 #  # $b # [1] 0 #  # $c # [1] 3  modifyList(l2, l1)  # drops l1[[1]] = 1 # $b # [1] 2 #  # $c # [1] 3 l1 <- list(a = 1, b = list(c = \"a\", d = FALSE))  l2 <- list(e = 2, b = list(d = TRUE))  modifyList(l1, l2)  # modifies l1$b$d from FALSE to TRUE # $a # [1] 1 #  # $b # $b$c # [1] \"a\" #  # $b$d # [1] TRUE #  #  # $e # [1] 2  update(l1, l2)      # replaces l1$b by l2$b # $a # [1] 1 #  # $b # $b$d # [1] TRUE #  #  # $e # [1] 2"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"functional-programming","dir":"Articles","previous_headings":"","what":"Functional programming","title":"Container operations for robust code","text":"apply family common higher-order functions can used containers usual.","code":"co <- container(a = 1, b = 2, c = 3, d = 4)  sapply(co, function(x) x^2) #  a  b  c  d  #  1  4  9 16  Filter(co, f = function(x) x > 2) # [c = 3, d = 4]  Reduce(co, f = sum) # [1] 10"},{"path":"https://github.com/rpahl/container/articles/code-development.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Container operations for robust code","text":"vignette demonstrates {container} enhances robust code development providing: Clear intent-driven operations adding, replacing, extracting, removing elements, minimizing boilerplate potential errors. Strict validation methods like replace_at() () safer precise modifications access. Flexible tools like peek_at() discard() handling invalid non-existent indices gracefully. Safe merging containers lists update() Full compatibility functional programming tools like sapply(), Filter(), Reduce() streamlined workflows. see functions disussed applied derived data structures, see: Manage parameter lists dict Manage data columns dict.table","code":""},{"path":"https://github.com/rpahl/container/articles/container.html","id":"interactive-usage","dir":"Articles","previous_headings":"","what":"Interactive usage","title":"Introduction to container","text":"interactive R session container can used similar base R list, also provides extra features. easier typing ’s recommended use shorter cont. container print method designed compact. verbose output, either convert base list … use str. length names work usual. container can also constructed list.","code":"library(container) co <- cont(a = 1, b = 1:10)  # same as co = container(a = 1, b = 1:10) print(co) # [a = 1, b = (1L 2L 3L 4L ...)] as.list(co) # $a # [1] 1 #  # $b #  [1]  1  2  3  4  5  6  7  8  9 10 str(co) # Container of 2  #  $ a: num 1 #  $ b: int [1:10] 1 2 3 4 5 6 7 8 9 10 length(co) # [1] 2  names(co) # [1] \"a\" \"b\"  names(co)[1] <- \"A\"  co # [A = 1, b = (1L 2L 3L 4L ...)] l <- list(x = (1:2)^1, y = (1:2)^2) co2 <- as.container(l)  co2 # [x = (1 2), y = (1 4)]"},{"path":"https://github.com/rpahl/container/articles/container.html","id":"add","dir":"Articles","previous_headings":"Interactive usage","what":"Add","title":"Introduction to container","text":"Elements can added concatenation, name, containers can nested. contrast base R list, elements added via positional index exceeds container’s length.","code":"c(co, c = 3, d = 4) # [A = 1, b = (1L 2L 3L 4L ...), c = 3, d = 4]  c(co, co2) # [A = 1, b = (1L 2L 3L 4L ...), x = (1 2), y = (1 4)] co[[\"c\"]] <- 3  co # [A = 1, b = (1L 2L 3L 4L ...), c = 3] co[[\"co2\"]] <- co2  co # [A = 1, b = (1L 2L 3L 4L ...), c = 3, co2 = [x = (1 2), y = (1 4)]] co[[5]] <- 5 # Error: index out of range (length = 4): 5"},{"path":"https://github.com/rpahl/container/articles/container.html","id":"replace","dir":"Articles","previous_headings":"Interactive usage","what":"Replace","title":"Introduction to container","text":"Single multiple value replacement works usual. contrast base list, containers can take mix numeric character indices. Another option replace value. works data type.","code":"co[[3]] <- 0 co[1:2] <- 0  co # [A = 0, b = 0, c = 0, co2 = [x = (1 2), y = (1 4)]] co[list(\"A\", 2, \"c\")] <- list(1, 2, \"three\")  co # [A = 1, b = 2, c = \"three\", co2 = [x = (1 2), y = (1 4)]] co[[{\"three\"}]] <- 3  co # [A = 1, b = 2, c = 3, co2 = [x = (1 2), y = (1 4)]] co[[{co2}]] <- 3  co # [A = 1, b = 2, c = 3, co2 = 3]"},{"path":"https://github.com/rpahl/container/articles/container.html","id":"extract","dir":"Articles","previous_headings":"Interactive usage","what":"Extract","title":"Introduction to container","text":"following standard access operators can applied. point, neither $ operator negative indices1 supported. just give empty results. now, workaround negative indexing temporarily convert list. another option, can pass number indices, possibly mixed numeric character. Invalid indices don’t produce NULLs just ignored.","code":"co[[\"A\"]] # [1] 1  co[[1]] # [1] 1  co[1:3] # [A = 1, b = 2, c = 3] co$A # NULL  co[-1] # [] tmp <- as.list(co)  as.container(tmp[-1]) # [b = 2, c = 3, co2 = 3] co[1, 3, \"b\"] # [A = 1, c = 3, b = 2]  co[2:1, \"A\"] # [b = 2, A = 1, A = 1] co[1:33] # [A = 1, b = 2, c = 3, co2 = 3]  co[3:33] # [c = 3, co2 = 3]  co[10:20] # []"},{"path":"https://github.com/rpahl/container/articles/container.html","id":"inspect","dir":"Articles","previous_headings":"Interactive usage","what":"Inspect","title":"Introduction to container","text":"Count number elements.","code":"count(co, 1) # [1] 1  count(co, 3) # [1] 2"},{"path":"https://github.com/rpahl/container/articles/container.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introduction to container","text":"vignette showcases {container} enhances interactive R workflows combining familiarity base R list operations additional features: Compact printing quick overviews, options detailed inspection via .list() str(). Flexible adding replacing elements, supporting mixed indices preventing --bounds additions. Intuitive extraction using familiar operators, safe handling invalid indices. Next, see vignette Container operations robust code.","code":""},{"path":"https://github.com/rpahl/container/articles/deque-set-dict.html","id":"deque","dir":"Articles","previous_headings":"","what":"Deque","title":"Deque, Set, and Dict","text":"Deques (double ended queues) generalization stacks queues therefore also can used mimic .","code":""},{"path":"https://github.com/rpahl/container/articles/deque-set-dict.html","id":"stack","dir":"Articles","previous_headings":"Deque","what":"Stack","title":"Deque, Set, and Dict","text":"stack last--first-(LIFO) data structure two basic operations, push pop, case mimicked ref_add ref_pop.","code":"# Mimic stack s = deque() s # || ref_add(s, 1) ref_add(s, 2) s # |1, 2|  ref_pop(s) # [1] 2 ref_pop(s) # [1] 1 s # ||"},{"path":"https://github.com/rpahl/container/articles/deque-set-dict.html","id":"queues","dir":"Articles","previous_headings":"Deque","what":"Queues","title":"Deque, Set, and Dict","text":"queue first--first-(FIFO) data structure two basic operations, push pop_left (enqueue dequeue), case mimicked ref_add ref_popleft. double-ended queue works ends also provides rotate reverse operations.","code":"# Mimic queue q = deque() q # || ref_add(q, 1) ref_add(q, 2) q # |1, 2|  ref_popleft(q) # [1] 1 ref_popleft(q) # [1] 2 q # || d = as.deque(1:4) d # |1L, 2L, 3L, 4L| rev(d) # |4L, 3L, 2L, 1L| rotate(d, 2) # |3L, 4L, 1L, 2L|"},{"path":"https://github.com/rpahl/container/articles/deque-set-dict.html","id":"set","dir":"Articles","previous_headings":"","what":"Set","title":"Deque, Set, and Dict","text":"elements set unique. Basic set operations provided. important note set comparison standard set order-invariant, e.g.: property intended allow positional access also sets (remember technically ‘Set’ class derived ‘Container’). want order-invariant sets, just use OrderedSet. Last least, {container} package covers small range sets set functions. wide range set functionality data structures fuzzy sets, multisets, customizable sets intervals, please refer sets package David Meyer.","code":"s1 = setnew(1, \"1\", 2, cars) s2 = setnew(1,      2, 3, iris)  s1 & s2 # {1, 2} s1 | s2 # {1, \"1\", 2, <<data.frame(50x2)>>, 3, <<data.frame(150x5)>>} s1 - s2 # {\"1\", <<data.frame(50x2)>>} s1 = setnew(1, 2, 3) s2 = setnew(2, 1, 3) s1 == s2 # [1] FALSE s1[1:2] # {1, 2} s2[1:2] # {2, 1} os1 = as.orderedset(s1) os2 = as.orderedset(s2) os1 # {1, 2, 3} os2 # {1, 2, 3} os1 == os2 # [1] TRUE"},{"path":"https://github.com/rpahl/container/articles/deque-set-dict.html","id":"dict","dir":"Articles","previous_headings":"","what":"Dict","title":"Deque, Set, and Dict","text":"dictionary, element mapped name. {container} package, dicts always sorted name, either initialization … … new elements added. added using add function, name clash signaled prevent overwriting existing elements. overwrite, can use one three approaches. design, elements can accessed name position, latter always based ordered elements. examples see vignette Manage parameter lists dict.","code":"d = dict(z = 2, a = 10) d # {a = 10, z = 2} d[[\"x\"]] = 1 d # {a = 10, x = 1, z = 2} add(d, z = 3) # Error: name 'z' exists already d[[\"z\"]] = 3 replace_at(d, z = 3) # {a = 10, x = 1, z = 3} update(d, dict(z = 3)) # {a = 10, x = 1, z = 3} d[\"x\", \"a\"] # {a = 10, x = 1} d[2:1] # {a = 10, x = 1}  add(d, b = 3)[2:1] # {a = 10, b = 3}"},{"path":"https://github.com/rpahl/container/articles/manage-data-columns.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Manage data columns with dict.table","text":"dplyr functions select mutate widely used manage data data.frame (tibble) columns. cover wide range use cases applied quick data exploration well data analysis pipelines. hand, implementing critical code building R packages, developers may revert base R minimize errors code dependencies. least, mutate select may require additional checking, example, catch column name clashes. container package parts developed close gap. version 1.0.0, provides dict.table, can considered data.table extended set functions add, extract, remove replace data columns minimal required additional checking, hopefully resulting lean robust code. vignette compares basic dplyr dict.table data column operations end shows frameworks can easily combined.","code":""},{"path":"https://github.com/rpahl/container/articles/manage-data-columns.html","id":"column-operations","dir":"Articles","previous_headings":"","what":"Column operations","title":"Manage data columns with dict.table","text":"keep matters simple, use tiny data set.","code":"library(container) library(dplyr)  data <- dict.table(x = c(0.2, 0.5), y = letters[1:2]) data # <dict.table> with 2 rows and 2 columns #        x      y #    <num> <char> # 1:   0.2      a # 2:   0.5      b"},{"path":"https://github.com/rpahl/container/articles/manage-data-columns.html","id":"add","dir":"Articles","previous_headings":"Column operations","what":"Add","title":"Manage data columns with dict.table","text":"Let’s add columns using mutate. someone familar tidyverse, code block might read somewhat odd column added mutated. add column via dict.table use add. intend add column thus stated clearly. Next, instead ID, let’s add another numeric column y, happens “name-clash” already existing column. course, initial y-column overwritten. easy see , may data lot columns column names created dynamically runtime. catch , usually overhead required. Let’s see dict.table-operation comparison. name clash caught default therefore requires additional checking.","code":"data %>%     mutate(ID = 1:2, z = 1) # <dict.table> with 2 rows and 4 columns #        x      y    ID     z #    <num> <char> <int> <num> # 1:   0.2      a     1     1 # 2:   0.5      b     2     1 data %>%     add(ID = 1:2, z = 1) # <dict.table> with 2 rows and 4 columns #        x      y    ID     z #    <num> <char> <int> <num> # 1:   0.2      a     1     1 # 2:   0.5      b     2     1 data %>%     mutate(y = 1) # <dict.table> with 2 rows and 2 columns #        x     y #    <num> <num> # 1:   0.2     1 # 2:   0.5     1 if (\"y\" %in% colnames(data)) {     stop(\"column y already exists\") } else {     data %>%         mutate(y = 1) } # Error: column y already exists data %>%     add(y = 1) # Error: name 'y' exists already"},{"path":"https://github.com/rpahl/container/articles/manage-data-columns.html","id":"modify","dir":"Articles","previous_headings":"Column operations","what":"Modify","title":"Manage data columns with dict.table","text":"intend indeed overwrite value, dict.table function replace_at can used. saw , column exist, mutate silently creates . want, means, want make sure something overwritten, , workaround needed. , workaround already “built-” dict.table-framework, , replace_at expects column exist. paraphrase intend mutate function, probably something like “Replace column , exist, add .”. may already guessed, can also expressed within dict.table-framework.","code":"data %>%     replace_at(y = 1) # <dict.table> with 2 rows and 2 columns #        x      y #    <num> <char> # 1:   0.2      1 # 2:   0.5      1  # or programmatically data %>%     replace_at(\"y\", 1) # <dict.table> with 2 rows and 2 columns #        x      y #    <num> <char> # 1:   0.2      1 # 2:   0.5      1 if (\"ID\" %in% colnames(data)) {     data %>%         mutate(ID = 1:2) } else {     stop(\"column ID not in data.frame\") } # Error: column ID not in data.frame data %>%     replace_at(ID = 1:2) # Error: column(s) not found: 'ID' data %>%     replace_at(ID = 1:2, .add = TRUE) # <dict.table> with 2 rows and 3 columns #        x      y    ID #    <num> <char> <int> # 1:   0.2      a     1 # 2:   0.5      b     2"},{"path":"https://github.com/rpahl/container/articles/manage-data-columns.html","id":"remove","dir":"Articles","previous_headings":"Column operations","what":"Remove","title":"Manage data columns with dict.table","text":"common tidyverse approach remove column based select function. One corresponding dict.table-function delete. Let’s see happens column exist first place. case, frameworks complain. Now assume want column removed exist otherwise silently ignore command, example: dict.table provides straight-forward solution via discard function:","code":"data %>%   select(-\"y\") # <dict.table> with 2 rows and 1 column #        x #    <num> # 1:   0.2 # 2:   0.5  data %>%     delete_at(\"y\") # <dict.table> with 2 rows and 1 column #        x #    <num> # 1:   0.2 # 2:   0.5 data %>%     select(-\"ID\") # Error in `select()`: # ! Can't select columns that don't exist. # ✖ Column `ID` doesn't exist.  data %>%     delete_at(\"ID\") # Error: column(s) not found: 'ID' if (\"ID\" %in% colnames(data)) {     data %>%         select(-\"ID\") } data %>%     discard_at(\"ID\") # <dict.table> with 2 rows and 2 columns #        x      y #    <num> <char> # 1:   0.2      a # 2:   0.5      b"},{"path":"https://github.com/rpahl/container/articles/manage-data-columns.html","id":"benchmark","dir":"Articles","previous_headings":"","what":"Benchmark","title":"Manage data columns with dict.table","text":"compare performance frameworks, benchmark column operations using standard ‘cars’ data set. hallmark reference use data.table. benchmark, add, replace finally delete column.  dict.table data.table performed nearly distance dplyr (4x). Let’s examine operation detail.  Apparently, mutate select operations slowest comparison, part result functions providing non-standard evaluation (NSE) generally wide range ways specify desired operation. Unsurprisingly flexibility comes cost. Since data.table expressions also involve NSE terms overhead, benchmark dict.table performs even best. said , course, data.table code can improved avoiding overhead instead use reference semantics via data.table built-set function.  puts things back perspective. also provided dict.table version using reference semantic, also built-results slight speed improvement standard version. result, data.table remains way go speed key.","code":"library(microbenchmark) library(ggplot2) library(data.table) library(tibble)  data = cars head(cars) #   speed dist # 1     4    2 # 2     4   10 # 3     7    4 # 4     7   22 # 5     8   16 # 6     9   10 bm <- microbenchmark(control = list(order=\"inorder\"), times = 100,      dict.table =         as.dict.table(data) %>%         add(time = .[[\"dist\"]] / .[[\"speed\"]]) %>%         replace_at(dist = 0) %>%         delete_at(\"speed\"),      `data.table[` =         as.data.table(data)[         ][, time := dist / speed         ][, dist := 0         ][, speed := NULL],      dplyr =         as_tibble(data) %>%         mutate(time = dist / speed) %>%         mutate(dist = 0) %>%         select(-speed) ) autoplot(bm) + theme_bw() data = cars bm <- microbenchmark(control = list(order=\"inorder\"), times = 100,      dit <- as.dict.table(data),     dit <- add(dit, time = dit[[\"dist\"]] / dit[[\"speed\"]]),     dit <- replace_at(dit, dist = 0),     dit <- delete_at(dit, \"speed\"),      dat <-  as.data.table(data),     dat[, time := dist / speed],     dat[, dist := 0],     dat[, speed := NULL],      tbl <- as_tibble(data),     tbl <- mutate(tbl, time = dist / speed),     tbl <- mutate(tbl, dist = 0),     tbl <- select(tbl, -speed) ) autoplot(bm) + theme_bw() data = cars bm <- microbenchmark(control = list(order=\"inorder\"), times = 100,      dict.table =         as.dict.table(data) %>%         add(time = dit[[\"dist\"]] / dit[[\"speed\"]]) %>%         replace_at(dist = 0) %>%         delete_at(\"speed\"),      ref_dict.table =         as.dict.table(data) %>%         ref_add(time = .[[\"dist\"]] / .[[\"speed\"]]) %>%         ref_replace_at(dist = 0) %>%         ref_delete_at(\"speed\"),      `data.table[` =         as.data.table(data)[         ][, time := dist / speed         ][, dist := 0         ][, speed := NULL],      set_data.table =         as.data.table(data) %>%         set(j = \"ID\", value = .[[\"dist\"]] / .[[\"speed\"]]) %>%         set(j = \"dist\", value = 0) %>%         set(j = \"speed\", value = NULL) )  autoplot(bm) + theme_bw()"},{"path":"https://github.com/rpahl/container/articles/manage-data-columns.html","id":"combine-dplyr-and-dict-table","dir":"Articles","previous_headings":"","what":"Combine dplyr and dict.table","title":"Manage data columns with dict.table","text":"Since dict.table fully compatible dplyr data.table, presented frameworks can easily combined order.","code":"res = data %>%     as.dict.table %>%     .[, time := dist / speed] %>%   # data.table     replace_at(dist = 0) %>%        # container     select(-speed)                  # dplyr"},{"path":"https://github.com/rpahl/container/articles/manage-data-columns.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Manage data columns with dict.table","text":"critical code, usually high priority avoid unintended data column operations. , usually additional code required check existence absence columns. dict.table framework provides set column operations built-checking, thereby yielding safer leaner code box ultimately freeing developer writing annoying checks .","code":""},{"path":"https://github.com/rpahl/container/articles/parameter-list.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Manage parameter lists with dict","text":"original motivation development package actually author found writing countless checks helper code managing parameter lists. became apparent something similar python’s dictionary make life easier idea container package born. package undergone changes since ’s initial version, dict use-case parameter lists remains valid. without ado, let’s see works practice.","code":"library(container, warn.conflicts = FALSE)  # Define some parameters params = dict(a = 1:10, b = \"foo\")"},{"path":"https://github.com/rpahl/container/articles/parameter-list.html","id":"add-or-replace","dir":"Articles","previous_headings":"","what":"Add or Replace","title":"Manage parameter lists with dict","text":"dict problem accidentally overriding existing parameter value solved box using add function. course, ’s also possible indeed override parameter. intend replace something, nothing replace? Now might wonder, ‘don’t care replaced added’. ’s easy. , using .add = TRUE basically means, ‘replace , , , just add ’ Maybe agree even simple use-cases already require effort using base R lists.","code":"params = add(params, a = 0) # Error: name 'a' exists already  add(params, x = 0) # ok # {a = (1L 2L 3L 4L ...), b = \"foo\", x = 0} replace_at(params, a = 0) # {a = 0, b = \"foo\"} replace_at(params, x = 0) # Error: names(s) not found: 'x' replace_at(params, a = 0, .add=TRUE) # {a = 0, b = \"foo\"}  replace_at(params, x = 0, .add=TRUE) # {a = (1L 2L 3L 4L ...), b = \"foo\", x = 0}"},{"path":"https://github.com/rpahl/container/articles/parameter-list.html","id":"extract","dir":"Articles","previous_headings":"","what":"Extract","title":"Manage parameter lists with dict","text":"extracting parameter, might want sure exists signal error otherwise. extract single raw element, use at2 Alternatively, use standard access operators, behave like base R list therefore return empty dict (NULL) index found.","code":"at(params, \"x\") # Error: index 'x' not found  at(params, \"a\", \"b\") # {a = (1L 2L 3L 4L ...), b = \"foo\"} at2(params, \"a\") #  [1]  1  2  3  4  5  6  7  8  9 10 params[\"x\"] # {}  params[[\"x\"]] # NULL  params[\"a\"] # {a = (1L 2L 3L 4L ...)}  params[[\"a\"]] #  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"https://github.com/rpahl/container/articles/parameter-list.html","id":"default-values","dir":"Articles","previous_headings":"Extract","what":"Default values","title":"Manage parameter lists with dict","text":"nice property dict provides easy flexible way manage default values. , peek non-existing parameter, default empty dict returned, option explicitly set default. also works multiple peeks.","code":"peek_at(params, \"x\") # {}  peek_at(params, \"x\", .default = 3:1) # {x = (3L 2L 1L)} peek_at(params, \"a\", \"x\", \"y\", .default = 3:1) # {a = (1L 2L 3L 4L ...), x = (3L 2L 1L), y = (3L 2L 1L)}"},{"path":"https://github.com/rpahl/container/articles/parameter-list.html","id":"remove","dir":"Articles","previous_headings":"","what":"Remove","title":"Manage parameter lists with dict","text":"Similar examples, user can control removal existing/non-existing parameters handled. expect parameter want signaled , use delete. Otherwise loosely delete parameter, regardless whether exists , use discard. ’s important note, “base R list way” delete elements work, just inserts NULL.","code":"delete_at(params, \"x\") # Error: names(s) not found: 'x'  delete_at(params, \"a\") # ok # {b = \"foo\"} discard_at(params, \"a\", \"x\") # {b = \"foo\"} params[[\"a\"]] <- NULL  params # {a = NULL, b = \"foo\"}"},{"path":"https://github.com/rpahl/container/articles/parameter-list.html","id":"merge","dir":"Articles","previous_headings":"","what":"Merge","title":"Manage parameter lists with dict","text":"Last least, dict allows easily merge /update parameter lists. can seen, existing parameters updated new parameters added. Using .dict can also ordinary lists. ’s . hope, free time safe bugs next time need manage parameter lists. last note, keep mind since container version 1.0.0, dict elements always sorted name, still able access elements position (based sorted values).","code":"par1 = dict(a = 1, b = \"foo\") par2 = dict(b = \"bar\", x = 2, y = 3)  update(par1, par2) # {a = 1, b = \"bar\", x = 2, y = 3} update(par1, as.dict(list(b = \"my b\", x = 100))) # {a = 1, b = \"my b\", x = 100} d = dict(x = 1, z = 2, a = 3) d # {a = 3, x = 1, z = 2}  d[[1]] # [1] 3  d[2:3] # {x = 1, z = 2}"},{"path":"https://github.com/rpahl/container/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Roman Pahl. Author, maintainer.","code":""},{"path":"https://github.com/rpahl/container/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pahl R (2025). container: Extending Base 'R' Lists. R package version 1.0.5, https://CRAN.R-project.org/package=container.","code":"@Manual{,   title = {container: Extending Base 'R' Lists},   author = {Roman Pahl},   year = {2025},   note = {R package version 1.0.5},   url = {https://CRAN.R-project.org/package=container}, }"},{"path":"https://github.com/rpahl/container/index.html","id":"container-","dir":"","previous_headings":"","what":"Extending Base R Lists","title":"Extending Base R Lists","text":"{container} package offers enhanced version base R’s list carefully designed set extract, replace, remove operations make easier safer work list-like data structures.","code":""},{"path":"https://github.com/rpahl/container/index.html","id":"why-use-container","dir":"","previous_headings":"","what":"Why use {container}?","title":"Extending Base R Lists","text":"{container} objects work similar base R lists top provide extract (custom default values, unintended NULL) add replace (mixed indices, unintended overrides) remove (loose strict deletion, remove index value) compact printing optional reference semantics addition, {container} provides specialized data structures Deque, Set, Dict special class dict.table, designed extend data.table container operations safely Manage data columns dict.table.","code":""},{"path":"https://github.com/rpahl/container/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extending Base R Lists","text":"","code":"# Install release version from CRAN install.packages(\"container\")  # Install development version from GitHub devtools::install_github(\"rpahl/container\")"},{"path":"https://github.com/rpahl/container/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extending Base R Lists","text":"Use like base R list Safe extract Safe remove Flexible peek Safe replace","code":"library(container) co <- container(colors = c(\"Red\", \"Green\"), numbers = c(1, 2, 3), data = cars)  co # [colors = (\"Red\" \"Green\"), numbers = (1 2 3), data = <<data.frame(50x2)>>] co[[\"colors\"]] <- c(\"Blue\", \"Yellow\")  co[[\"colors\"]] # [1] \"Blue\"   \"Yellow\"  co[2:1] # [numbers = (1 2 3), colors = (\"Blue\" \"Yellow\")] at(co, \"colours\")   # oops # Error: index 'colours' not found  at(co, \"colors\") # [colors = (\"Blue\" \"Yellow\")] co <- delete_at(co, \"colours\")   # oops # Error: names(s) not found: 'colours'  co <- delete_at(co, \"colors\") co # [numbers = (1 2 3), data = <<data.frame(50x2)>>] at(co, \"colors\")   # oops # Error: index 'colors' not found  peek_at(co, \"colors\") # []  peek_at(co, \"colors\", .default = c(\"black\", \"white\")) # [colors = (\"black\" \"white\")] co <- replace_at(co, num = 1:10)   # oops # Error: names(s) not found: 'num'  co <- replace_at(co, numbers = 1:10) co # [numbers = (1L 2L 3L 4L ...), data = <<data.frame(50x2)>>]"},{"path":"https://github.com/rpahl/container/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Extending Base R Lists","text":"Introduction container Container operations robust code Manage parameter lists dict Manage data columns dict.table","code":""},{"path":"https://github.com/rpahl/container/index.html","id":"when-not-to-use-container","dir":"","previous_headings":"","what":"When not to use {container}","title":"Extending Base R Lists","text":"Don’t bother using {container} framework speed high importance. exception dict.table class, fast based data.table. , computation speed critical application, refer using base R lists packages optimized performance, collections cppcontainers package.","code":""},{"path":"https://github.com/rpahl/container/reference/add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Elements to Containers — add","title":"Add Elements to Containers — add","text":"Add elements container-like objects.","code":""},{"path":"https://github.com/rpahl/container/reference/add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Elements to Containers — add","text":"","code":"add(.x, ...)  ref_add(.x, ...)  # S3 method for class 'Container' add(.x, ...)  # S3 method for class 'Container' ref_add(.x, ...)  # S3 method for class 'Dict' add(.x, ...)  # S3 method for class 'Dict' ref_add(.x, ...)  # S3 method for class 'dict.table' add(.x, ...)  # S3 method for class 'dict.table' ref_add(.x, ...)"},{"path":"https://github.com/rpahl/container/reference/add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Elements to Containers — add","text":".x R object respective class. ... elements added.","code":""},{"path":"https://github.com/rpahl/container/reference/add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Elements to Containers — add","text":"Container, object class Container (one respective derived classes). dict.table object class dict.table.","code":""},{"path":"https://github.com/rpahl/container/reference/add.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add Elements to Containers — add","text":"add uses copy semantics ref_add works reference. .x Container, Set Deque object, elements added can (must ) named. .x Dict dict.table object, elements must form key = value. one keys already exists, error given.","code":""},{"path":"https://github.com/rpahl/container/reference/add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Elements to Containers — add","text":"","code":"co = container(1) add(co, 1, b = 2, c = container(1:3)) #> [1, 1, b = 2, c = [(1L 2L 3L)]]  s = setnew(1) add(s, 1, 1, b = 2, \"1\", co = container(1, 1)) #> {1, b = 2, \"1\", co = [1, 1]}  d = dict(a = 1) add(d, b = 2, co = container(1:3)) #> {a = 1, b = 2, co = [(1L 2L 3L)]}  try(add(d, a = 7:9))  # key 'a' already in Dict #> Error : name 'a' exists already  dit = dict.table(a = 1:3) add(dit, b = 3:1, d = 4:6) #> <dict.table> with 3 rows and 3 columns #>        a     b     d #>    <int> <int> <int> #> 1:     1     3     4 #> 2:     2     2     5 #> 3:     3     1     6  try(add(dit, a = 7:9))  # column 'a' already exists #> Error : name 'a' exists already  dit = dict.table(a = 1:3) add(dit, b = 3:1, d = 4:6) #> <dict.table> with 3 rows and 3 columns #>        a     b     d #>    <int> <int> <int> #> 1:     1     3     4 #> 2:     2     2     5 #> 3:     3     1     6  try(add(dit, a = 7:9))  # column 'a' already exists #> Error : name 'a' exists already"},{"path":"https://github.com/rpahl/container/reference/addleft.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Elements to the Left of Deques — addleft","title":"Add Elements to the Left of Deques — addleft","text":"Add elements left side Deque objects.","code":""},{"path":"https://github.com/rpahl/container/reference/addleft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Elements to the Left of Deques — addleft","text":"","code":"addleft(.x, ...)  ref_addleft(.x, ...)  # S3 method for class 'Deque' addleft(.x, ...)  # S3 method for class 'Deque' ref_addleft(.x, ...)"},{"path":"https://github.com/rpahl/container/reference/addleft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Elements to the Left of Deques — addleft","text":".x [Deque] object ... elements added.","code":""},{"path":"https://github.com/rpahl/container/reference/addleft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Elements to the Left of Deques — addleft","text":"Deque, object class Deque elements added left .x.","code":""},{"path":"https://github.com/rpahl/container/reference/addleft.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add Elements to the Left of Deques — addleft","text":"addleft uses copy semantics ref_addleft work reference.","code":""},{"path":"https://github.com/rpahl/container/reference/addleft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Elements to the Left of Deques — addleft","text":"","code":"d = deque(0) add(d, a = 1, b = 2)         # |0, a = 1, b = 2| #> |0, a = 1, b = 2| addleft(d, a = 1, b = 2)     # |b = 2, a = 1, 0| #> |b = 2, a = 1, 0|"},{"path":"https://github.com/rpahl/container/reference/at.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Elements Safely — at","title":"Extract Elements Safely — at","text":"Extract parts Container given indices. index invalid, error signaled. given string, element matching name returned. two identical names, value first match (.e. leftmost element) returned. Indices can letters numbers, time.","code":""},{"path":"https://github.com/rpahl/container/reference/at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Elements Safely — at","text":"","code":"at(.x, ...)  # S3 method for class 'Container' at(.x, ...)  # S3 method for class 'dict.table' at(.x, ...)"},{"path":"https://github.com/rpahl/container/reference/at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Elements Safely — at","text":".x R object respective class. ... indices elements extracted","code":""},{"path":"https://github.com/rpahl/container/reference/at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Elements Safely — at","text":"Container, returns values given indidces. dict.table, returns columns given indices.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Elements Safely — at","text":"","code":"# Container co = container(a = 1, 2, b = 3, 4) at(co, 1:3) #> [a = 1, 2, b = 3] at(co, \"a\", \"b\", 2) #> [a = 1, b = 3, 2] try(at(co, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at(co, 1:10))    # index 5 exceeds length of Container #> Error : index 5 exceeds length of Container, which is 4 # Dict d = dict(a = 1, b = 3) at(d, 1:2) #> {a = 1, b = 3} at(d, \"a\", 2) #> {a = 1, b = 3} try(at(d, \"x\"))      # index 'x' not found #> Error : index 'x' not found try(at(d, 1:3))      # index 5 exceeds length of Dict #> Error : index 3 exceeds length of Dict, which is 2  # dict.table dit = dict.table(a = 1:3, b = 4:6) at(dit, \"a\") #> <dict.table> with 3 rows and 1 column #>        a #>    <int> #> 1:     1 #> 2:     2 #> 3:     3 at(dit, 2) #> <dict.table> with 3 rows and 1 column #>        b #>    <int> #> 1:     4 #> 2:     5 #> 3:     6 at(dit, \"a\", 2) #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     1     4 #> 2:     2     5 #> 3:     3     6 try(at(dit, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at(dit, 1:3))     # index 3 exceeds length of dict.table #> Error : index 3 exceeds length of dict.table, which is 2"},{"path":"https://github.com/rpahl/container/reference/at2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Single Elements Safely — at2","title":"Extract Single Elements Safely — at2","text":"Extracts value Container given index. index invalid, error signaled. given string, element matching name returned. two identical names, value first match (.e. leftmost element) returned. Extract value index. index invalid found, error signaled. given string, element matching name returned. two identical names, value first match (.e. leftmost element) returned.","code":""},{"path":"https://github.com/rpahl/container/reference/at2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Single Elements Safely — at2","text":"","code":"at2(x, ...)  # S3 method for class 'Container' at2(x, index, ...)  # S3 method for class 'dict.table' at2(x, index, ...)"},{"path":"https://github.com/rpahl/container/reference/at2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Single Elements Safely — at2","text":"x R object respective class. ... arguments passed methods. index character name numeric position sought value.","code":""},{"path":"https://github.com/rpahl/container/reference/at2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Single Elements Safely — at2","text":"Container, returns value given index. dict.table, returns column given index signals error found.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/at2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Single Elements Safely — at2","text":"","code":"# Container co = container(a = 1, 2, b = 3, 4) at2(co, 1) #> [1] 1 at2(co, \"a\") #> [1] 1 at2(co, 2) #> [1] 2 try(at2(co, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at2(co, 5))       # index 5 exceeds length of Container #> Error : index 5 exceeds length of Container, which is 4  # Dict d = dict(a = 1, b = 3) at2(d, 1) #> [1] 1 at2(d, \"a\") #> [1] 1 at2(d, 2) #> [1] 3 try(at2(d, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at2(d, 5))       # index 5 exceeds length of Dict #> Error : index 5 exceeds length of Dict, which is 2  # dict.table dit = dict.table(a = 1:3, b = 4:6) at2(dit, 1) #> [1] 1 2 3 at2(dit, \"a\") #> [1] 1 2 3 at2(dit, 2) #> [1] 4 5 6 try(at2(dit, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at2(dit, 5))       # index 5 exceeds length of dict.table #> Error : index 5 exceeds length of dict.table, which is 2"},{"path":"https://github.com/rpahl/container/reference/clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear a Container — clear","title":"Clear a Container — clear","text":"Removes elements container object.","code":""},{"path":"https://github.com/rpahl/container/reference/clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear a Container — clear","text":"","code":"clear(x)  ref_clear(x)  # S3 method for class 'Container' clear(x)  # S3 method for class 'Container' ref_clear(x)  # S3 method for class 'dict.table' clear(x)  # S3 method for class 'dict.table' ref_clear(x)"},{"path":"https://github.com/rpahl/container/reference/clear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear a Container — clear","text":"x R object.","code":""},{"path":"https://github.com/rpahl/container/reference/clear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear a Container — clear","text":"Container, object class Container (one respective derived classes). dict.table object class dict.table.","code":""},{"path":"https://github.com/rpahl/container/reference/clear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear a Container — clear","text":"","code":"co = container(1, 2, mean) clear(co) #> [] co #> [1, 2, <<function>>] ref_clear(co) co #> []  dit = dict.table(a = 1, b = 2) clear(dit) #> <dict.table> with 0 rows and 0 columns #> Null data.table (0 rows and 0 cols) dit              # original was not touched #> <dict.table> with 1 row and 2 columns #>        a     b #>    <num> <num> #> 1:     1     2 ref_clear(dit) dit              # original was cleared #> <dict.table> with 0 rows and 0 columns #> Null data.table (0 rows and 0 cols)"},{"path":"https://github.com/rpahl/container/reference/clone.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone an Object — clone","title":"Clone an Object — clone","text":"Creates copy object.","code":""},{"path":"https://github.com/rpahl/container/reference/clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone an Object — clone","text":"","code":"clone(x)  # S3 method for class 'Container' clone(x)  # S3 method for class 'dict.table' clone(x)"},{"path":"https://github.com/rpahl/container/reference/clone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone an Object — clone","text":"x R object.","code":""},{"path":"https://github.com/rpahl/container/reference/clone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone an Object — clone","text":"copy object.","code":""},{"path":"https://github.com/rpahl/container/reference/clone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone an Object — clone","text":"","code":"co = container(1, 2, 3) co2 = clone(co) co == co2 #> [1] TRUE  d = dict.table(a = 1:2, b = 3:4) d2 = clone(d) ref_clear(d) print(d2) #> <dict.table> with 2 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     1     3 #> 2:     2     4"},{"path":"https://github.com/rpahl/container/reference/ContainerS3.html","id":null,"dir":"Reference","previous_headings":"","what":"Container - Enhancing R's list — ContainerS3","title":"Container - Enhancing R's list — ContainerS3","text":"container data structure typical member functions insert, delete access elements container object. can considered base R list extended functionality. Container class also serves base class Deque, Set, Dict objects.","code":""},{"path":"https://github.com/rpahl/container/reference/ContainerS3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Container - Enhancing R's list — ContainerS3","text":"","code":"container(...)  cont(...)  as.container(x)  as.cont(x)  is.container(x)  # S3 method for class 'Container' as.list(x, ...)  # S3 method for class 'Container' length(x)  # S3 method for class 'Container' names(x)  # S3 method for class 'Container' names(x) <- value"},{"path":"https://github.com/rpahl/container/reference/ContainerS3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Container - Enhancing R's list — ContainerS3","text":"... (possibly named) elements put removed Container, additional arguments passed methods. x R object type .container .container class Container S3 methods. value character vector names.","code":""},{"path":"https://github.com/rpahl/container/reference/ContainerS3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Container - Enhancing R's list — ContainerS3","text":"Methods alter Container objects usually come two versions providing either copy reference semantics latter start 'ref_' note reference semantic, example, add() ref_add(). container(...) initializes returns Container object. cont(...) short cut container(...). .container(x) .cont(x) coerce x Container .container(x) check x Container .list(x) converts container x base R list. container's elements copied (deeply) conversion. length(x) return number elements contained x. names(x) return names elements contained x. names(x) <- value sets names x. x + y combines x y new container appending y x. x - y element-wise discards items y x, given element contained x. result always container. x == y TRUE contents x y lexicographically equal. x != y TRUE contents x y equal. x < y TRUE contents x lexicographically less contents y. x <= y TRUE contents x lexicographically less equal contents y. add(.x, ...) ref_add(.x, ...) add elements .x. (.x, ...,) returns value given indices. Indices can letters numbers . indices must exist. at2(x, index) returns value given index signals error found. clear(x) ref_clear(x) remove elements x. clone(x) create copy x. count(x, elem) count often elem occurs x. delete(.x, ...) ref_delete(.x, ...) find remove elements. one elements exist, error signaled. delete_at(.x, ...) ref_delete_at(.x, ...) find remove values given indices. given index invalid, error signaled. discard(.x, ...) ref_discard(.x, ...) find discard elements. Elements exist, ignored. discard_at(.x, ...) ref_discard_at(.x, ...) find discard values given indices. Invalid indices ignored. (x, elem) TRUE element x otherwise FALSE. has_name(x, name) check name x is_empty(x) TRUE object empty otherwise FALSE peek_at(x, ..., .default = NULL) returns value given indices (found) given default value. peek_at2(x, index, default) returns value given index (found) given default value. ref_pop(.x, index) return element given index remove container object. rename(.x, old, new) ref_rename(.x, old, new) rename one keys old new, respectively, copy place (.e. reference). replace(.x, old, new, add = FALSE) ref_replace(.x, old, new, add = FALSE) try find element old replace element new. old exist, error raised, unless add set TRUE. replace_at(.x, .., .add = FALSE) ref_replace_at(.x, ..., .add = FALSE) replace values given indices. given index invalid, error signaled unless .add set TRUE.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/ContainerS3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Container - Enhancing R's list — ContainerS3","text":"","code":"co = container(1:5, c = container(\"a\", 1), l = list()) is.container(co) #> [1] TRUE print(co) #> [(1L 2L 3L 4L ...), c = [\"a\", 1], l = list()] length(co) #> [1] 3 names(co) #> [1] \"\"  \"c\" \"l\"  unpack(co)   # flatten recursively similar to unlist #>                      c1  c2  #> \"1\" \"2\" \"3\" \"4\" \"5\" \"a\" \"1\"   # Math co = container(1, 2, -(3:5)) co #> [1, 2, (-3L -4L -5L)] abs(co) #> [1, 2, 3, 4, 5] cumsum(co) #> [1, 3, 0, -4, -9] round(co) #> [1, 2, -3, -4, -5] exp(co) #> [2.718282, 7.389056, 0.04978707, 0.01831564, 0.006737947]  # Summary range(co) #> [1] -5  2 min(co) #> [1] -5 max(co) #> [1] 2  # Arithmetic c1 = container(1, 1:2) c2 = container(2, 1:2) c1 + c2     # same as c(c1, c2) #> [1, (1L 2L), 2, (1L 2L)] c2 + c1     # same as c(c2, c1) #> [2, (1L 2L), 1, (1L 2L)]  c1 - c2 #> [1] c2 - c1 #> [2] c1 - c1 #> []  # Comparison c1 = container(1, 2, 3) c2 = container(1, 3, 2) c1 == c1            # TRUE #> [1] TRUE c1 != c2            # TRUE #> [1] TRUE c1 <= c1            # TRUE #> [1] TRUE c1 == c2            # FALSE #> [1] FALSE c1 < c2             # TRUE #> [1] TRUE c1 < container(2)   # TRUE #> [1] TRUE c1 < container()    # FALSE #> [1] FALSE  # Extract or replace co = container(a = 1, b = 2, c = 3, d = 4) co[1:2] #> [a = 1, b = 2] co[1, 4] #> [a = 1, d = 4] co[\"d\", 2] #> [d = 4, b = 2] co[list(\"d\", 2)] #> [d = 4, b = 2] co[0:10] #> [a = 1, b = 2, c = 3, d = 4]  co = container(a = 1, b = 2) co[[1]] #> [1] 1 co[[\"a\"]] #> [1] 1 co[[\"x\"]] #> NULL co = container(a = 1, b = \"bar\") (co[1:2] <- 1:2) #> [1] 1 2  try({ co[3] <- 3 # index out of range }) #> Error : index out of range (length = 2): 3 (co[list(1, \"b\")] <- 3:4)   # mixed numeric/character index #> [1] 3 4  co = container(a = 1, b = 2) co[[1]] <- 9 co[[\"b\"]] <- 8 co[[\"x\"]] <- 7 co$z <- 99 print(co) #> [a = 9, b = 8, x = 7, z = 99]  # Replace 8 by 0 co[[{8}]] <- 0 print(co) #> [a = 9, b = 0, x = 7, z = 99]   co = container(a = 1, b = \"bar\") co$f <- 3 co$b <- 2 co #> [a = 1, b = 2, f = 3]   co = container(1) add(co, 1, b = 2, c = container(1:3)) #> [1, 1, b = 2, c = [(1L 2L 3L)]]   co = container(a = 1, 2, b = 3, 4) at(co, 1:3) #> [a = 1, 2, b = 3] at(co, \"a\", \"b\", 2) #> [a = 1, b = 3, 2] try(at(co, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at(co, 1:10))    # index 5 exceeds length of Container #> Error : index 5 exceeds length of Container, which is 4  co = container(a = 1, 2, b = 3, 4) at2(co, 1) #> [1] 1 at2(co, \"a\") #> [1] 1 at2(co, 2) #> [1] 2 try(at2(co, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at2(co, 5))       # index 5 exceeds length of Container #> Error : index 5 exceeds length of Container, which is 4  co = container(1, 2, mean) clear(co) #> [] print(co)    # Original was not touched #> [1, 2, <<function>>] ref_clear(co)   # Clears original print(co) #> []  co = container(1, 2, 3) co2 = clone(co) co == co2 #> [1] TRUE  co = container(\"a\", \"b\", \"a\", mean, mean) count(co, \"a\") #> [1] 2 count(co, mean) #> [1] 2 count(co, \"c\") #> [1] 0  co = container(\"a\", 1:3, iris) print(co) #> [\"a\", (1L 2L 3L), <<data.frame(150x5)>>] delete(co, 1:3, \"a\") #> [<<data.frame(150x5)>>] delete(co, iris) #> [\"a\", (1L 2L 3L)] try({ delete(co, \"b\")   # \"b\" is not in Container }) #> Error : \"b\" is not in Container  co = container(a = 1, b = 2, 3) delete_at(co, \"a\", \"b\")          # [3] #> [3] delete_at(co, 1:2)               # [3] #> [3] delete_at(co, \"a\", 3)            # [b = 2] #> [b = 2] try({  delete_at(co, 4)                 # index out of range  delete_at(co, \"x\")               # names(s) not found: 'x' }) #> Error : index out of range (length = 3): 4  co = container(\"a\", num = 1:3, data = iris) print(co) #> [\"a\", num = (1L 2L 3L), data = <<data.frame(150x5)>>] discard(co, 1:3, \"a\") #> [data = <<data.frame(150x5)>>] discard(co, iris) #> [\"a\", num = (1L 2L 3L)] discard(co, \"b\")  # ignored #> [\"a\", num = (1L 2L 3L), data = <<data.frame(150x5)>>]  co = container(a = 1, b = 2, 3) discard_at(co, \"a\", \"b\")         # [3] #> [3] discard_at(co, 1:2)              # [3] #> [3] discard_at(co, \"a\", 3)           # [b = 2] #> [b = 2] discard_at(co, \"x\")              # ignored #> [a = 1, b = 2, 3]  co = container(1, 2, mean) has(co, 1)                   # TRUE #> [1] TRUE has(co, mean)                # TRUE #> [1] TRUE has(co, 1:2)                 # FALSE #> [1] FALSE  co = container(a = 1, 2, f = mean) has_name(co, \"a\")    # TRUE #> [1] TRUE has_name(co, \"f\")    # TRUE #> [1] TRUE has_name(co, \"2\")    # FALSE #> [1] FALSE  co = container(1, 2) is_empty(co) #> [1] FALSE is_empty(clear(co)) #> [1] TRUE  co = container(a = 1, 2, b = 3, 4) peek_at(co, 1) #> [a = 1] peek_at(co, \"a\") #> [a = 1] peek_at(co, \"x\") #> [] peek_at(co, \"x\", .default = 0) #> [x = 0] peek_at(co, \"a\", \"x\", 2, 9, .default = -1) #> [a = 1, x = -1, 2, -1]  co = container(a = 1, 2, b = 3, 4) peek_at2(co, 1) #> [1] 1 peek_at2(co, \"a\") #> [1] 1 peek_at2(co, \"x\") #> NULL peek_at2(co, \"x\", default = 0) #> [1] 0  co = container(a = 1, b = 1:3, d = \"foo\") ref_pop(co, \"b\") #> [1] 1 2 3 ref_pop(co, 1) #> [1] 1  try({ ref_pop(co, \"x\")  # index 'x' not found }) #> Error : index 'x' not found co = container(a = 1, b = 2, 3) rename(co, c(\"a\", \"b\"), c(\"a1\", \"y\")) #> [a1 = 1, y = 2, 3] print(co) #> [a = 1, b = 2, 3] ref_rename(co, c(\"a\", \"b\"), c(\"a1\", \"y\")) #> [a1 = 1, y = 2, 3] print(co) #> [a1 = 1, y = 2, 3]  co = container(\"x\", 9) replace(co, 9, 0) #> [\"x\", 0] replace(co, \"x\", 0) #> [0, 9] try({ replace(co, \"z\", 0)              # old element (\"z\") is not in Container }) #> Error : old element (\"z\") is not in Container replace(co, \"z\", 0, add = TRUE)  # ok, adds the element #> [\"x\", 9, 0]  co = container(a = 0, b = \"z\") replace_at(co, a = 1, b = 2) #> [a = 1, b = 2] replace_at(co, 1:2, 1:2)                 # same #> [a = 1L, b = 2L] replace_at(co, c(\"a\", \"b\"), list(1, 2))  # same #> [a = 1, b = 2]  try({ replace_at(co, x = 1)                    # names(s) not found: 'x' }) #> Error : names(s) not found: 'x' replace_at(co, x = 1, .add = TRUE)       # ok (adds x = 1) #> [a = 0, b = \"z\", x = 1]"},{"path":"https://github.com/rpahl/container/reference/container_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Container Package Options — container_options","title":"Set Container Package Options — container_options","text":"Set Container Package Options","code":""},{"path":"https://github.com/rpahl/container/reference/container_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Container Package Options — container_options","text":"","code":"container_options(..., .reset = FALSE)  getContainerOption(x, default = NULL)"},{"path":"https://github.com/rpahl/container/reference/container_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Container Package Options — container_options","text":"... options can defined, using name = value. .reset logical TRUE, options reset default returned. x character string holding option name. default specified option set options list, value returned.","code":""},{"path":"https://github.com/rpahl/container/reference/container_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Container Package Options — container_options","text":"container_options() returns list set options sorted name. container_options(name), list length one containing set value, NULL unset. Can also multiple names (see Examples). container_options(key = value) sets option name key value returns previous options invisibly.","code":""},{"path":"https://github.com/rpahl/container/reference/container_options.html","id":"container-options","dir":"Reference","previous_headings":"","what":"Container Options","title":"Set Container Package Options — container_options","text":"compare (default = .equal) useDots (default = TRUE) whether abbreviate long container elements ... exceeding vec.len (see ). FALSE, abbreviated <<type(length)>>. vec.len (default = 4) length limit container vectors abbreviated.","code":""},{"path":"https://github.com/rpahl/container/reference/container_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Container Package Options — container_options","text":"","code":"co = container(1L, 1:10, as.list(1:5)) co #> [1L, (1L 2L 3L 4L ...), <<list(5)>>]  container_options(useDots = FALSE) co #> [1L, <<integer(10)>>, <<list(5)>>]  container_options(useDots = TRUE, vec.len = 6) co #> [1L, (1L 2L 3L 4L 5L 6L ...), list(1L, 2L, 3L, 4L, 5L)]  has(co, 1.0) #> [1] TRUE  container_options(compare = \"identical\")  has(co, 1.0) # still uses 'all.equal' #> [1] TRUE  co2 = container(1L) has(co2, 1.0) #> [1] FALSE has(co2, 1L) #> [1] TRUE  container_options() #> $compare #> [1] \"identical\" #>  #> $useDots #> [1] TRUE #>  #> $vec.len #> [1] 6 #>  container_options(.reset = TRUE) #> $compare #> [1] \"all.equal\" #>  #> $useDots #> [1] TRUE #>  #> $vec.len #> [1] 4 #>"},{"path":"https://github.com/rpahl/container/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Elements — count","title":"Count Elements — count","text":"Count number occurences element.","code":""},{"path":"https://github.com/rpahl/container/reference/count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Elements — count","text":"","code":"count(x, elem)  # S3 method for class 'Container' count(x, elem)  # S3 method for class 'Set' count(x, elem)"},{"path":"https://github.com/rpahl/container/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Elements — count","text":"x R object. elem element counted.","code":""},{"path":"https://github.com/rpahl/container/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Elements — count","text":"integer number many times elem occurs object.","code":""},{"path":"https://github.com/rpahl/container/reference/count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Elements — count","text":"","code":"co = container(\"a\", \"b\", \"a\", mean, mean) count(co, \"a\") #> [1] 2 count(co, mean) #> [1] 2 count(co, \"c\") #> [1] 0"},{"path":"https://github.com/rpahl/container/reference/delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Container Elements Safely — delete","title":"Delete Container Elements Safely — delete","text":"Search remove elements object. element found, error signaled.","code":""},{"path":"https://github.com/rpahl/container/reference/delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Container Elements Safely — delete","text":"","code":"delete(.x, ...)  ref_delete(.x, ...)  # S3 method for class 'Container' delete(.x, ...)  # S3 method for class 'Container' ref_delete(.x, ...)"},{"path":"https://github.com/rpahl/container/reference/delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Container Elements Safely — delete","text":".x R object. ... elements deleted.","code":""},{"path":"https://github.com/rpahl/container/reference/delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete Container Elements Safely — delete","text":"Container, object class Container (one respective derived classes).","code":""},{"path":"https://github.com/rpahl/container/reference/delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Container Elements Safely — delete","text":"","code":"s = setnew(\"a\", 1:3, iris) print(s) #> {\"a\", (1L 2L 3L), <<data.frame(150x5)>>} delete(s, 1:3, \"a\") #> {<<data.frame(150x5)>>} delete(s, iris) #> {\"a\", (1L 2L 3L)} try({ delete(s, \"b\")  # \"b\" is not in Set }) #> Error : \"b\" is not in Set"},{"path":"https://github.com/rpahl/container/reference/delete_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Elements at Indices Safely — delete_at","title":"Delete Elements at Indices Safely — delete_at","text":"Search remove values given indices, can numeric character . given index invalid, error signaled. Indices can numbers names .","code":""},{"path":"https://github.com/rpahl/container/reference/delete_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Elements at Indices Safely — delete_at","text":"","code":"delete_at(.x, ...)  ref_delete_at(.x, ...)  # S3 method for class 'Container' delete_at(.x, ...)  # S3 method for class 'Container' ref_delete_at(.x, ...)  # S3 method for class 'dict.table' delete_at(.x, ...)  # S3 method for class 'dict.table' ref_delete_at(.x, ...)"},{"path":"https://github.com/rpahl/container/reference/delete_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Elements at Indices Safely — delete_at","text":".x R object. ... indices values deleted.","code":""},{"path":"https://github.com/rpahl/container/reference/delete_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete Elements at Indices Safely — delete_at","text":"Container, object class Container (one respective derived classes). dict.table, object class dict.table.","code":""},{"path":"https://github.com/rpahl/container/reference/delete_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Elements at Indices Safely — delete_at","text":"","code":"co = container(a = 1, b = 2, 3) delete_at(co, \"a\", \"b\")          # [3] #> [3] delete_at(co, 1:2)               # [3] #> [3] delete_at(co, \"a\", 3)            # [b = 2] #> [b = 2] try({ delete_at(co, 4)                 # index out of range delete_at(co, \"x\")               # names(s) not found: 'x' }) #> Error : index out of range (length = 3): 4  dit = as.dict.table(head(sleep)) dit #> <dict.table> with 6 rows and 3 columns #>    extra  group     ID #>    <num> <fctr> <fctr> #> 1:   0.7      1      1 #> 2:  -1.6      1      2 #> 3:  -0.2      1      3 #> 4:  -1.2      1      4 #> 5:  -0.1      1      5 #> 6:   3.4      1      6 delete_at(dit, \"ID\") #> <dict.table> with 6 rows and 2 columns #>    extra  group #>    <num> <fctr> #> 1:   0.7      1 #> 2:  -1.6      1 #> 3:  -0.2      1 #> 4:  -1.2      1 #> 5:  -0.1      1 #> 6:   3.4      1 delete_at(dit, \"ID\", 1) #> <dict.table> with 6 rows and 1 column #>     group #>    <fctr> #> 1:      1 #> 2:      1 #> 3:      1 #> 4:      1 #> 5:      1 #> 6:      1 try({  delete_at(dit, \"foo\")   # Column 'foo' not in dict.table }) #> Error : column(s) not found: 'foo'"},{"path":"https://github.com/rpahl/container/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Functions — deprecated","title":"Deprecated Functions — deprecated","text":"functions provided backwards-compatibility may defunct soon next release.","code":""},{"path":"https://github.com/rpahl/container/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated Functions — deprecated","text":"","code":"empty(x)  # S3 method for class 'Container' empty(x)  size(x)  # S3 method for class 'Container' size(x)  sortkey(x, decr = FALSE)  # S3 method for class 'Dict' sortkey(x, decr = FALSE)  values(x)  # S3 method for class 'Container' values(x)  # S3 method for class 'dict.table' values(x)  keys(x)"},{"path":"https://github.com/rpahl/container/reference/deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated Functions — deprecated","text":"x R object. decr logical sort decreasingly?","code":""},{"path":"https://github.com/rpahl/container/reference/deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated Functions — deprecated","text":"empty()      is_empty() instead set()                       setnew() instead size()       use length() instead sortkey()    keys Dict objects now always sorted remove()     use delete() instead type()       use anymore values()     use .list() instead","code":""},{"path":"https://github.com/rpahl/container/reference/dequeS3.html","id":null,"dir":"Reference","previous_headings":"","what":"Deque - Double-Ended Queue — DequeS3","title":"Deque - Double-Ended Queue — DequeS3","text":"Deques generalization stacks queues typically methods add, remove access elements sides underlying data sequence. , deque can also used mimic stacks queues.","code":""},{"path":"https://github.com/rpahl/container/reference/dequeS3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deque - Double-Ended Queue — DequeS3","text":"","code":"deque(...)  as.deque(x)  is.deque(x)"},{"path":"https://github.com/rpahl/container/reference/dequeS3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deque - Double-Ended Queue — DequeS3","text":"... initial elements put Deque. x R object type .deque() .deque() class Deque S3 methods.","code":""},{"path":"https://github.com/rpahl/container/reference/dequeS3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deque - Double-Ended Queue — DequeS3","text":"Methods alter Deque objects usually come two versions providing either copy reference semantics latter start 'ref_' note reference semantic, example, add() ref_add(). deque(...) initializes returns object class Deque .deque(x) coerces x deque. .deque(x) returns TRUE x class Deque FALSE otherwise. x + y combines x y new deque appending y x. x - y element-wise removes items y x, given element contained x. addleft(.x, ...) adds (possibly named) elements left side .x. ref_addleft(.x, ...) addleft(.x, ...) adds reference. peek(x, default = NULL) peek last element. x empty, return default. peekleft(x, default = NULL) peek first element. x empty, return default. ref_pop(.x) pop last element. .x empty, error given. ref_popleft(.x) pop first element. .x empty, error given. rev(x) ref_rev(x) reverses elements done copy place, respectively. rotate(x, n) rotate elements n steps right, n negative, rotate left.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/dequeS3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deque - Double-Ended Queue — DequeS3","text":"","code":"d = deque(1, 2, s = \"a\", v = 1:3) is.deque(d) #> [1] TRUE print(d) #> |1, 2, s = \"a\", v = (1L 2L 3L)| length(d) #> [1] 4 names(d) #> [1] \"\"  \"\"  \"s\" \"v\" as.list(d) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> $s #> [1] \"a\" #>  #> $v #> [1] 1 2 3 #>  rev(d) #> |v = (1L 2L 3L), s = \"a\", 2, 1|  l = list(0, 1) d2 = as.deque(l) d + d2 #> |1, 2, s = \"a\", v = (1L 2L 3L), 0, 1| c(d, d2) # same as d + d2 #> |1, 2, s = \"a\", v = (1L 2L 3L), 0, 1| d2 + d #> |0, 1, 1, 2, s = \"a\", v = (1L 2L 3L)| d - d2 #> |2, s = \"a\", v = (1L 2L 3L)| c(d2, d) # same as d2 + d #> |0, 1, 1, 2, s = \"a\", v = (1L 2L 3L)| d2 - d #> |0| # Math d = deque(1, 2, -(3:5)) d #> |1, 2, (-3L -4L -5L)| abs(d) #> |1, 2, 3, 4, 5| cumsum(d) #> |1, 3, 0, -4, -9| round(d) #> |1, 2, -3, -4, -5| exp(d) #> |2.718282, 7.389056, 0.04978707, 0.01831564, 0.006737947|  # Summary range(d) #> [1] -5  2 min(d) #> [1] -5 max(d) #> [1] 2  d1 = deque(1, 1:2) d2 = deque(2, 1:2) d1 + d2     # same as c(d1, d2) #> |1, (1L 2L), 2, (1L 2L)| d2 + d1     # same as c(d2, d1) #> |2, (1L 2L), 1, (1L 2L)|  d1 - d2 #> |1| d2 - d1 #> |2| d1 - d1 #> ||   d = deque(0) add(d, a = 1, b = 2)         # |0, a = 1, b = 2| #> |0, a = 1, b = 2| addleft(d, a = 1, b = 2)     # |b = 2, a = 1, 0| #> |b = 2, a = 1, 0|  d = deque(1, 2, 3) peek(d) #> [1] 3 peekleft(d) #> [1] 1 peek(deque()) #> NULL peek(deque(), default = 0) #> [1] 0 peekleft(deque(), default = 0) #> [1] 0 d = deque(1, 2, 3) ref_pop(d) #> [1] 3 print(d) #> |1, 2| ref_popleft(d) #> [1] 1 print(d) #> |2|  try({ ref_pop(deque())  # pop at empty Deque }) #> Error : pop at empty Deque  d = deque(a = 1, b = 2, 3) rev(d) #> |3, b = 2, a = 1| print(d) #> |a = 1, b = 2, 3| ref_rev(d) #> |3, b = 2, a = 1| print(d) #> |3, b = 2, a = 1|  d = deque(1, 2, 3, 4) rotate(d) #> |4, 1, 2, 3| rotate(d, n = 2) #> |3, 4, 1, 2|"},{"path":"https://github.com/rpahl/container/reference/dict.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining Dict and data.table — dict.table","title":"Combining Dict and data.table — dict.table","text":"dict.table combination dict data.table basically can considered data.table unique column names extended set functions add, extract remove data columns goal facilitate code development using data.table. dict.table object provides dict data.table functions operators time.","code":""},{"path":"https://github.com/rpahl/container/reference/dict.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining Dict and data.table — dict.table","text":"","code":"dict.table(...)  as.dict.table(x, ...)  # S3 method for class 'data.table' as.dict.table(x, copy = TRUE, ...)  is.dict.table(x)  # S3 method for class 'dict.table' rbind(x, ...)  # S3 method for class 'dict.table' cbind(x, ...)"},{"path":"https://github.com/rpahl/container/reference/dict.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining Dict and data.table — dict.table","text":"... elements put dict.table /additional arguments passed . x R object dict.table object. copy TRUE creates copy data.table object otherwise works passed object reference.","code":""},{"path":"https://github.com/rpahl/container/reference/dict.table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combining Dict and data.table — dict.table","text":"Methods alter dict.table objects usually come two versions providing either copy reference semantics latter start 'ref_' note reference semantic, example, add() ref_add(). dict.table(...) initializes returns dict object. .dict.table(x, ...) coerce x dict.table .dict.table(x) check x dict.table add(.x, ...) ref_add(.x, ...) add columns .x. column name already exists, error given. (.x, ...) returns columns given indices. Indices can letters numbers . columns must exist. at2(x, index) returns column given index signals error found. clear(x) ref_clear(x) remove elements x. clone(x) create copy x. delete_at(.x, ...) ref_delete_at(.x, ...) find remove columns either name index (). one columns exist, error signaled. discard_at(.x, ...) ref_discard_at(.x, ...) find remove columns either name index (). Invalid column indices ignored. (x, column) check column dict.table object. has_name(x, name) check x given column name. is_empty(x) TRUE object empty otherwise FALSE peek_at(x, ..., .default = NULL) returns columns given indices (found) columns given default value. peek_at2(x, index, default = NULL) return column named index exist otherwise given default value. default length match number rows, recycled accordingly warning given, unless default value length 1, case recycling done silently. ref_pop(.x, index) return element given column index remove column dict.table object. rename(.x, old, new) ref_rename(.x, old, new) rename one columns old new, respectively, copy place (.e. reference). replace_at(.x, .., .add = FALSE) ref_replace_at(.x, ..., .add = FALSE) replace values given indices. given index invalid, error signaled unless .add set TRUE. update(object, ) ref_update(object, ) adds columns dict yet object replaces values existing columns.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/dict.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining Dict and data.table — dict.table","text":"","code":"# Some basic examples using some typical data.table and dict operations. # The constructor can take the 'key' argument known from data.table: require(data.table) #> Loading required package: data.table dit = dict.table(x = rep(c(\"b\",\"a\",\"c\"), each = 3), y = c(1,3,6), key = \"y\") print(dit) #> <dict.table> with 9 rows and 2 columns #> Key: <y> #>         x     y #>    <char> <num> #> 1:      b     1 #> 2:      a     1 #> 3:      c     1 #> 4:      b     3 #> 5:      a     3 #> 6:      c     3 #> 7:      b     6 #> 8:      a     6 #> 9:      c     6 setkey(dit, \"x\")                             # sort by 'x' print(dit) #> <dict.table> with 9 rows and 2 columns #> Key: <x> #>         x     y #>    <char> <num> #> 1:      a     1 #> 2:      a     3 #> 3:      a     6 #> 4:      b     1 #> 5:      b     3 #> 6:      b     6 #> 7:      c     1 #> 8:      c     3 #> 9:      c     6 (add(dit, \"v\" = 1:9))                        # add column v = 1:9 #> <dict.table> with 9 rows and 3 columns #> Key: <x> #>         x     y     v #>    <char> <num> <int> #> 1:      a     1     1 #> 2:      a     3     2 #> 3:      a     6     3 #> 4:      b     1     4 #> 5:      b     3     5 #> 6:      b     6     6 #> 7:      c     1     7 #> 8:      c     3     8 #> 9:      c     6     9 dit[y > 5] #> <dict.table> with 3 rows and 2 columns #> Key: <x> #>         x     y #>    <char> <num> #> 1:      a     6 #> 2:      b     6 #> 3:      c     6 (ref_discard_at(dit, \"x\"))                   # discard column 'x' #> <dict.table> with 9 rows and 1 column #>        y #>    <num> #> 1:     1 #> 2:     3 #> 3:     6 #> 4:     1 #> 5:     3 #> 6:     6 #> 7:     1 #> 8:     3 #> 9:     6  try(at(dit, \"x\"))                            # index 'x' not found #> Error : index 'x' not found try(replace_at(dit, x = 0))                  # cannot be replaced, if it does not exist #> Error : column(s) not found: 'x'  dit = replace_at(dit, x = 0, .add = TRUE)    # ok - re-adds column 'x' with all 0s peek_at(dit, \"x\")                            # glance at column 'x' #> <dict.table> with 9 rows and 1 column #>        x #>    <num> #> 1:     0 #> 2:     0 #> 3:     0 #> 4:     0 #> 5:     0 #> 6:     0 #> 7:     0 #> 8:     0 #> 9:     0 has_name(dit, \"x\")                           # TRUE #> [1] TRUE ref_pop(dit, \"x\")                            # get column and remove it #> [1] 0 0 0 0 0 0 0 0 0 has_name(dit, \"x\")                           # FALSE #> [1] FALSE   # Copy and reference semantics when coercing *from* a data.table dat = data.table(a = 1, b = 2) dit = as.dict.table(dat) is.dict.table(dit)                           # TRUE #> [1] TRUE is.dict.table(dat)                           # FALSE #> [1] FALSE ref_replace_at(dit, \"a\", 9) dit[[\"a\"]]                                   # 9 #> [1] 9 dat[[\"a\"]]                                   # 1 #> [1] 1 dit.dat = as.dict.table(dat, copy = FALSE)   # init by reference ref_replace_at(dit.dat, \"a\", 9) dat[[\"a\"]]                                   # 9 #> [1] 9 is.dict.table(dit.dat)                       # TRUE #> [1] TRUE is.dict.table(dat)                           # TRUE now as well! #> [1] TRUE  # Coerce from dict d = dict(a = 1, b = 1:3) as.dict.table(d) #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <num> <int> #> 1:     1     1 #> 2:     1     2 #> 3:     1     3  dit = dict.table(a = 1:2, b = 1:2) rbind(dit, dit) #> <dict.table> with 4 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     1     1 #> 2:     2     2 #> 3:     1     1 #> 4:     2     2  # rbind ... dit = dict.table(a = 1:2, b = 1:2) rbind(dit, dit) #> <dict.table> with 4 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     1     1 #> 2:     2     2 #> 3:     1     1 #> 4:     2     2  # ... can be mixed with data.tables dat = data.table(a = 3:4, b = 3:4) rbind(dit, dat)  # yields a dict.table #> <dict.table> with 4 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     1     1 #> 2:     2     2 #> 3:     3     3 #> 4:     4     4 rbind(dat, dit)  # yields a data.table #>        a     b #>    <int> <int> #> 1:     3     3 #> 2:     4     4 #> 3:     1     1 #> 4:     2     2  # cbind ... dit = dict.table(a = 1:2, b = 1:2) dit2 = dict.table(c = 3:4, d = 5:6) cbind(dit, dit2) #> <dict.table> with 2 rows and 4 columns #>        a     b     c     d #>    <int> <int> <int> <int> #> 1:     1     1     3     5 #> 2:     2     2     4     6  # ... can be mixed with data.tables dat = data.table(x = 3:4, y = 3:4) cbind(dit, dat) #> <dict.table> with 2 rows and 4 columns #>        a     b     x     y #>    <int> <int> <int> <int> #> 1:     1     1     3     3 #> 2:     2     2     4     4  dit = dict.table(a = 1:3) add(dit, b = 3:1, d = 4:6) #> <dict.table> with 3 rows and 3 columns #>        a     b     d #>    <int> <int> <int> #> 1:     1     3     4 #> 2:     2     2     5 #> 3:     3     1     6  try(add(dit, a = 7:9))  # column 'a' already exists #> Error : name 'a' exists already  dit = dict.table(a = 1:3, b = 4:6) at(dit, \"a\") #> <dict.table> with 3 rows and 1 column #>        a #>    <int> #> 1:     1 #> 2:     2 #> 3:     3 at(dit, 2) #> <dict.table> with 3 rows and 1 column #>        b #>    <int> #> 1:     4 #> 2:     5 #> 3:     6 at(dit, \"a\", 2) #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     1     4 #> 2:     2     5 #> 3:     3     6 try(at(dit, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at(dit, 1:3))     # index 3 exceeds length of dict.table #> Error : index 3 exceeds length of dict.table, which is 2  dit = dict.table(a = 1:3, b = 4:6) at2(dit, 1) #> [1] 1 2 3 at2(dit, \"a\") #> [1] 1 2 3 at2(dit, 2) #> [1] 4 5 6 try(at2(dit, \"x\"))     # index 'x' not found #> Error : index 'x' not found try(at2(dit, 5))       # index 5 exceeds length of dict.table #> Error : index 5 exceeds length of dict.table, which is 2  dit = dict.table(a = 1, b = 2) clear(dit) #> <dict.table> with 0 rows and 0 columns #> Null data.table (0 rows and 0 cols) dit #> <dict.table> with 1 row and 2 columns #>        a     b #>    <num> <num> #> 1:     1     2 ref_clear(dit) dit #> <dict.table> with 0 rows and 0 columns #> Null data.table (0 rows and 0 cols)  d = dict.table(a = 1:2, b = 3:4) d2 = clone(d) ref_clear(d) print(d2) #> <dict.table> with 2 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     1     3 #> 2:     2     4  (dit = as.dict.table(head(sleep))) #> <dict.table> with 6 rows and 3 columns #>    extra  group     ID #>    <num> <fctr> <fctr> #> 1:   0.7      1      1 #> 2:  -1.6      1      2 #> 3:  -0.2      1      3 #> 4:  -1.2      1      4 #> 5:  -0.1      1      5 #> 6:   3.4      1      6 delete_at(dit, \"ID\") #> <dict.table> with 6 rows and 2 columns #>    extra  group #>    <num> <fctr> #> 1:   0.7      1 #> 2:  -1.6      1 #> 3:  -0.2      1 #> 4:  -1.2      1 #> 5:  -0.1      1 #> 6:   3.4      1 delete_at(dit, \"ID\", 1) #> <dict.table> with 6 rows and 1 column #>     group #>    <fctr> #> 1:      1 #> 2:      1 #> 3:      1 #> 4:      1 #> 5:      1 #> 6:      1  try({ delete_at(dit, \"foo\")   # Column 'foo' not in dict.table }) #> Error : column(s) not found: 'foo'  dit = as.dict.table(head(sleep)) discard_at(dit, \"ID\") #> <dict.table> with 6 rows and 2 columns #>    extra  group #>    <num> <fctr> #> 1:   0.7      1 #> 2:  -1.6      1 #> 3:  -0.2      1 #> 4:  -1.2      1 #> 5:  -0.1      1 #> 6:   3.4      1 discard_at(dit, \"ID\", 1) #> <dict.table> with 6 rows and 1 column #>     group #>    <fctr> #> 1:      1 #> 2:      1 #> 3:      1 #> 4:      1 #> 5:      1 #> 6:      1 discard_at(dit, \"foo\")  # ignored #> <dict.table> with 6 rows and 3 columns #>    extra  group     ID #>    <num> <fctr> <fctr> #> 1:   0.7      1      1 #> 2:  -1.6      1      2 #> 3:  -0.2      1      3 #> 4:  -1.2      1      4 #> 5:  -0.1      1      5 #> 6:   3.4      1      6  dit = dict.table(a = 1:3, b = as.list(4:6)) has(dit, 1:3)            # TRUE #> [1] TRUE has(dit, 4:6)            # FALSE #> [1] FALSE has(dit, as.list(4:6))   # TRUE #> [1] TRUE  dit = dict.table(a = 1, b = 2) has_name(dit, \"a\")    # TRUE #> [1] TRUE has_name(dit, \"x\")    # FALSE #> [1] FALSE  d = dict.table(a = 1:4, b = 4:1) is_empty(d) #> [1] FALSE is_empty(clear(d)) #> [1] TRUE  dit = dict.table(a = 1:3, b = 4:6) peek_at(dit, \"a\") #> <dict.table> with 3 rows and 1 column #>        a #>    <int> #> 1:     1 #> 2:     2 #> 3:     3 peek_at(dit, 1) #> <dict.table> with 3 rows and 1 column #>        a #>    <int> #> 1:     1 #> 2:     2 #> 3:     3 peek_at(dit, 3) #> <dict.table> with 0 rows and 0 columns #> Null data.table (0 rows and 0 cols) peek_at(dit, \"x\") #> <dict.table> with 0 rows and 0 columns #> Null data.table (0 rows and 0 cols) peek_at(dit, \"x\", .default = 0) #> <dict.table> with 3 rows and 1 column #>        x #>    <num> #> 1:     0 #> 2:     0 #> 3:     0 peek_at(dit, \"a\", \"x\", .default = 0) #> <dict.table> with 3 rows and 2 columns #>        a     x #>    <int> <num> #> 1:     1     0 #> 2:     2     0 #> 3:     3     0  dit = dict.table(a = 1:3, b = 4:6) peek_at2(dit, \"a\") #> [1] 1 2 3 peek_at2(dit, 1) #> [1] 1 2 3 peek_at2(dit, 3) #> NULL peek_at2(dit, 3, default = 9) #> [1] 9 9 9 peek_at2(dit, \"x\") #> NULL peek_at2(dit, \"x\", default = 0) #> [1] 0 0 0  dit = dict.table(a = 1:3, b = 4:6) ref_pop(dit, \"a\") #> [1] 1 2 3 ref_pop(dit, 1) #> [1] 4 5 6  try({ ref_pop(dit, \"x\")  # index 'x' not found }) #> Error : index 'x' not found  dit = dict.table(a = 1, b = 2, c = 3) rename(dit, c(\"a\", \"b\"), c(\"a1\", \"y\")) #> <dict.table> with 1 row and 3 columns #>       a1     y     c #>    <num> <num> <num> #> 1:     1     2     3 print(dit) #> <dict.table> with 1 row and 3 columns #>        a     b     c #>    <num> <num> <num> #> 1:     1     2     3 ref_rename(dit, c(\"a\", \"b\"), c(\"a1\", \"y\")) print(dit) #> <dict.table> with 1 row and 3 columns #>       a1     y     c #>    <num> <num> <num> #> 1:     1     2     3  dit = dict.table(a = 1:3) replace_at(dit, \"a\", 3:1) #> <dict.table> with 3 rows and 1 column #>        a #>    <int> #> 1:     3 #> 2:     2 #> 3:     1  try({ replace_at(dit, \"b\", 4:6)               # column 'b' not in dict.table }) #> Error : column(s) not found: 'b' replace_at(dit, \"b\", 4:6, .add = TRUE)  # ok, adds column #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     1     4 #> 2:     2     5 #> 3:     3     6  # Update parts of tables (second overwrites columns of the first) dit1 = dict.table(a = 1:2, b = 3:4) dit2 = dict.table(         b = 5:6, c = 8:9) update(dit1, dit2) #> <dict.table> with 2 rows and 3 columns #>        a     b     c #>    <int> <int> <int> #> 1:     1     5     8 #> 2:     2     6     9 update(dit2, dit1) #> <dict.table> with 2 rows and 3 columns #>        b     c     a #>    <int> <int> <int> #> 1:     3     8     1 #> 2:     4     9     2"},{"path":"https://github.com/rpahl/container/reference/dictS3.html","id":null,"dir":"Reference","previous_headings":"","what":"A Dictionary — DictS3","title":"A Dictionary — DictS3","text":"Dict initially developed resemble Python's dict type, now offers features flexibility, example, providing associative key-value pair well positional array semantics. implemented specialized associative Container thus sharing Container methods adapted account key-value pair semantic. elements must named.","code":""},{"path":"https://github.com/rpahl/container/reference/dictS3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Dictionary — DictS3","text":"","code":"dict(...)  as.dict(x)  is.dict(x)"},{"path":"https://github.com/rpahl/container/reference/dictS3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Dictionary — DictS3","text":"... elements put Dict. x R object type .dict() .dict() class Dict S3 methods.","code":""},{"path":"https://github.com/rpahl/container/reference/dictS3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Dictionary — DictS3","text":"Internally, key-value pairs stored hash-table elements sorted lexicographically keys. Methods alter Dict objects usually come two versions providing either copy reference semantics latter start 'ref_' note reference semantic, example, add() ref_add(). dict(...) initializes returns object class Dict .dict(x) coerces x dictionary .dict(x) returns TRUE x class Dict FALSE otherwise. x + y combines x y new dict updating x y (see also [update()]). x - y removes keys x appear y. x & y returns copy x keeping keys common (key intersection), , keys x exist y removed. x | y returns copy x extended elements y stored keys (names) exist x, thereby combining keys objects (set union keys). add(.x, ...) ref_add(.x, ...) adds key = value pairs .x. keys already exists, error given. replace(.x, old, new) ref_replace(.x, old) try find element old replace element new. old exist, error raised. update(object, ) ref_update(object, ) adds elements dict keys yet object replaces values existing keys.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/dictS3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Dictionary — DictS3","text":"","code":"d = dict(b = \"one\", a = 1, f = mean, na = NA) print(d) #> {a = 1, b = \"one\", f = <<function>>, na = NA} names(d) #> [1] \"a\"  \"b\"  \"f\"  \"na\"  try(dict(a = 1, 2))   # all elements must be named #> Error : all elements must be named  # Coercion as.dict(list(A = 1:3, B = \"b\")) #> {A = (1L 2L 3L), B = \"b\"} as.dict(c(x = 1, y = \"x\", z = 2 + 3)) #> {x = \"1\", y = \"x\", z = \"5\"} # Math d = dict(a = rnorm(1), b = rnorm(1)) abs(d) #> {a = 1.400044, b = 0.2553171} cumsum(d) #> {a = -1.400044, b = -1.144726} round(d) #> {a = -1, b = 0} exp(d) #> {a = 0.2465862, b = 1.290871}  # Summary range(d) #> [1] -1.4000435  0.2553171 min(d) #> [1] -1.400044 max(d) #> [1] 0.2553171  d1 = dict(a = 1, b = list(1, 2)) d2 = dict(a = 2, b = list(1, 2)) d1 + d2      # same as update(d, d2) #> {a = 2, b = list(1, 2)} d2 + d1      # same as update(d2, d) #> {a = 1, b = list(1, 2)} try({ c(d1, d2)    # duplicated keys are not allowed for Dict }) #> Error : duplicated keys are not allowed d1 - d2 #> {} d2 - d1 #> {} d1 - d1 #> {}  d1 = dict(a = 1, b = 2) d2 = dict(a = 10, x = 4) d1 & d2      # {a = 1} #> {a = 1}  d1 | d2      # {a = 1, b = 2, x = 4} #> {a = 1, b = 2, x = 4}   d = dict(a = 1) add(d, b = 2, co = container(1:3)) #> {a = 1, b = 2, co = [(1L 2L 3L)]}  try(add(d, a = 7:9))  # key 'a' already in Dict #> Error : name 'a' exists already  d = dict(a = 1, b = \"z\") replace(d, 1, 1:5) #> {a = (1L 2L 3L 4L ...), b = \"z\"} replace(d, \"z\", \"a\") #> {a = 1, b = \"a\"}  try({ replace(d, \"a\", 2)              # old element (\"a\") is not in Dict }) #> Error : old element (\"a\") is not in Dict  d1 = dict(a = 1, b = 2) d2 = dict(       b = 0, c = 3) update(d1, d2)  # {a = 1, b = 0, c = 3} #> {a = 1, b = 0, c = 3} update(d2, d1)  # {a = 1, b = 2, c = 3} #> {a = 1, b = 2, c = 3}"},{"path":"https://github.com/rpahl/container/reference/discard.html","id":null,"dir":"Reference","previous_headings":"","what":"Discard Container Elements — discard","title":"Discard Container Elements — discard","text":"Search remove element object. element found, ignore attempt.","code":""},{"path":"https://github.com/rpahl/container/reference/discard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discard Container Elements — discard","text":"","code":"discard(.x, ...)  ref_discard(.x, ...)  # S3 method for class 'Container' discard(.x, ...)  # S3 method for class 'Container' ref_discard(.x, ...)"},{"path":"https://github.com/rpahl/container/reference/discard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discard Container Elements — discard","text":".x R object. ... elements discarded.","code":""},{"path":"https://github.com/rpahl/container/reference/discard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discard Container Elements — discard","text":"Container, object class Container (one respective derived classes).","code":""},{"path":"https://github.com/rpahl/container/reference/discard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discard Container Elements — discard","text":"","code":"s = setnew(\"a\", num = 1:3, data = iris) print(s) #> {\"a\", num = (1L 2L 3L), data = <<data.frame(150x5)>>} discard(s, 1:3, \"a\") #> {data = <<data.frame(150x5)>>} discard(s, iris) #> {\"a\", num = (1L 2L 3L)} discard(s, \"b\")  # ignored #> {\"a\", num = (1L 2L 3L), data = <<data.frame(150x5)>>}"},{"path":"https://github.com/rpahl/container/reference/discard_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Discard Elements at Indices — discard_at","title":"Discard Elements at Indices — discard_at","text":"Search remove values given indices, can numeric character . Invalid indices ignored.","code":""},{"path":"https://github.com/rpahl/container/reference/discard_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discard Elements at Indices — discard_at","text":"","code":"discard_at(.x, ...)  ref_discard_at(.x, ...)  # S3 method for class 'Container' discard_at(.x, ...)  # S3 method for class 'Container' ref_discard_at(.x, ...)  # S3 method for class 'dict.table' discard_at(.x, ...)  # S3 method for class 'dict.table' ref_discard_at(.x, ...)"},{"path":"https://github.com/rpahl/container/reference/discard_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discard Elements at Indices — discard_at","text":".x R object. ... indices values discarded.","code":""},{"path":"https://github.com/rpahl/container/reference/discard_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discard Elements at Indices — discard_at","text":"Container, object class Container (one respective derived classes). dict.table, object class dict.table.","code":""},{"path":"https://github.com/rpahl/container/reference/discard_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discard Elements at Indices — discard_at","text":"","code":"co = container(a = 1, b = 2, 3) discard_at(co, \"a\", \"b\")         # [3] #> [3] discard_at(co, 1:2)              # [3] #> [3] discard_at(co, \"a\", 3)           # [b = 2] #> [b = 2] discard_at(co, \"x\")              # ignored #> [a = 1, b = 2, 3]  dit = as.dict.table(head(sleep)) discard_at(dit, \"ID\") #> <dict.table> with 6 rows and 2 columns #>    extra  group #>    <num> <fctr> #> 1:   0.7      1 #> 2:  -1.6      1 #> 3:  -0.2      1 #> 4:  -1.2      1 #> 5:  -0.1      1 #> 6:   3.4      1 discard_at(dit, \"ID\", 1) #> <dict.table> with 6 rows and 1 column #>     group #>    <fctr> #> 1:      1 #> 2:      1 #> 3:      1 #> 4:      1 #> 5:      1 #> 6:      1 discard_at(dit, \"foo\")  # ignored #> <dict.table> with 6 rows and 3 columns #>    extra  group     ID #>    <num> <fctr> <fctr> #> 1:   0.7      1      1 #> 2:  -1.6      1      2 #> 3:  -0.2      1      3 #> 4:  -1.2      1      4 #> 5:  -0.1      1      5 #> 6:   3.4      1      6"},{"path":"https://github.com/rpahl/container/reference/has.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Element — has","title":"Check for Element — has","text":"Check Element","code":""},{"path":"https://github.com/rpahl/container/reference/has.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Element — has","text":"","code":"has(x, ...)  # S3 method for class 'Container' has(x, elem, ...)  # S3 method for class 'dict.table' has(x, column, ...)"},{"path":"https://github.com/rpahl/container/reference/has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Element — has","text":"x R object. ... additional arguments passed methods. elem element found. column vector values length number rows dict.table.","code":""},{"path":"https://github.com/rpahl/container/reference/has.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Element — has","text":"TRUE element x otherwise FALSE. dict.table, TRUE column exists x otherwise FALSE.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/has.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Element — has","text":"","code":"co = container(1, 2, mean) has(co, 1)                   # TRUE #> [1] TRUE has(co, mean)                # TRUE #> [1] TRUE has(co, 1:2)                 # FALSE #> [1] FALSE  dit = dict.table(a = 1:3, b = as.list(4:6)) has(dit, 1:3)            # TRUE #> [1] TRUE has(dit, 4:6)            # FALSE #> [1] FALSE has(dit, as.list(4:6))   # TRUE #> [1] TRUE"},{"path":"https://github.com/rpahl/container/reference/has_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Name — has_name","title":"Check for Name — has_name","text":"Check Name","code":""},{"path":"https://github.com/rpahl/container/reference/has_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Name — has_name","text":"","code":"has_name(x, name)  # S3 method for class 'Container' has_name(x, name)  # S3 method for class 'dict.table' has_name(x, name)"},{"path":"https://github.com/rpahl/container/reference/has_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Name — has_name","text":"x R object. name character name found.","code":""},{"path":"https://github.com/rpahl/container/reference/has_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Name — has_name","text":"TRUE name x otherwise FALSE. dict.table TRUE dict.table objects given column name, otherwise FALSE.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/has_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Name — has_name","text":"","code":"co = container(a = 1, 2, f = mean) has_name(co, \"a\")    # TRUE #> [1] TRUE has_name(co, \"f\")    # TRUE #> [1] TRUE has_name(co, \"2\")    # FALSE #> [1] FALSE  dit = dict.table(a = 1:2, b = 3:4) has_name(dit, \"a\")   # TRUE #> [1] TRUE has_name(dit, \"x\")   # FALSE #> [1] FALSE"},{"path":"https://github.com/rpahl/container/reference/is_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Object is Empty — is_empty","title":"Check if Object is Empty — is_empty","text":"Check Object Empty","code":""},{"path":"https://github.com/rpahl/container/reference/is_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Object is Empty — is_empty","text":"","code":"is_empty(x)  # S3 method for class 'Container' is_empty(x)  # S3 method for class 'dict.table' is_empty(x)"},{"path":"https://github.com/rpahl/container/reference/is_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Object is Empty — is_empty","text":"x R object.","code":""},{"path":"https://github.com/rpahl/container/reference/is_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Object is Empty — is_empty","text":"TRUE object empty otherwise FALSE.","code":""},{"path":"https://github.com/rpahl/container/reference/is_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Object is Empty — is_empty","text":"","code":"co = container(1, 2) is_empty(co) #> [1] FALSE is_empty(clear(co)) #> [1] TRUE  d = dict.table(a = 1:4, b = 4:1) is_empty(d) #> [1] FALSE is_empty(clear(d)) #> [1] TRUE"},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterable abstract class interface — Iterable","title":"Iterable abstract class interface — Iterable","text":"Iterable object provides iter() method, expected return Iterator object. class defines abstract class interface class inheriting class provides iter() method must implement private method create_iter(), must return Iterator object.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iterable abstract class interface — Iterable","text":"Roman Pahl","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Iterable abstract class interface — Iterable","text":"Iterable$new() Iterable$iter() Iterable$clone()","code":""},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Iterable abstract class interface — Iterable","text":"Iterable abstract class thus instantiated.","code":""},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterable abstract class interface — Iterable","text":"","code":"Iterable$new()"},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"method-iter-","dir":"Reference","previous_headings":"","what":"Method iter()","title":"Iterable abstract class interface — Iterable","text":"Create iterator","code":""},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterable abstract class interface — Iterable","text":"","code":"Iterable$iter()"},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterable abstract class interface — Iterable","text":"returns Iterator object.","code":""},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Iterable abstract class interface — Iterable","text":"objects class cloneable method.","code":""},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterable abstract class interface — Iterable","text":"","code":"Iterable$clone(deep = FALSE)"},{"path":"https://github.com/rpahl/container/reference/Iterable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterable abstract class interface — Iterable","text":"deep Whether make deep clone.","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator Class — Iterator","title":"Iterator Class — Iterator","text":"Iterator object allows iterate sequences. implements next_iter get_value iterate retrieve value sequence associated . standard S3 interface, see iter().","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iterator Class — Iterator","text":"Roman Pahl","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Iterator Class — Iterator","text":"Iterator$new() Iterator$begin() Iterator$get_value() Iterator$get_next() Iterator$has_next() Iterator$has_value() Iterator$length() Iterator$pos() Iterator$next_iter() Iterator$print() Iterator$reset_iter() Iterator$clone()","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Iterator Class — Iterator","text":"Iterator constructor","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$new(x, .subset = .subset2)"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator Class — Iterator","text":"x object iterate .subset accessor function","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"invisibly returns Iterator object","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-begin-","dir":"Reference","previous_headings":"","what":"Method begin()","title":"Iterator Class — Iterator","text":"set iterator first element underlying sequence unless length sequence zero, case point nothing.","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$begin()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"invisibly returns Iterator object","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-get-value-","dir":"Reference","previous_headings":"","what":"Method get_value()","title":"Iterator Class — Iterator","text":"get value iterator points ","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$get_value()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"returns value Iterator pointing .","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-get-next-","dir":"Reference","previous_headings":"","what":"Method get_next()","title":"Iterator Class — Iterator","text":"get next value","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$get_next()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"increments iterator returns value Iterator pointing .","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-has-next-","dir":"Reference","previous_headings":"","what":"Method has_next()","title":"Iterator Class — Iterator","text":"check iterator elements","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$has_next()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"TRUE iterator next element else FALSE","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-has-value-","dir":"Reference","previous_headings":"","what":"Method has_value()","title":"Iterator Class — Iterator","text":"check iterator points value","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$has_value()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"TRUE iterator points value otherwise FALSE","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-length-","dir":"Reference","previous_headings":"","what":"Method length()","title":"Iterator Class — Iterator","text":"iterator length","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$length()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"number elements iterate","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-pos-","dir":"Reference","previous_headings":"","what":"Method pos()","title":"Iterator Class — Iterator","text":"get iterator position","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$pos()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"integer iterator next element else FALSE","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-next-iter-","dir":"Reference","previous_headings":"","what":"Method next_iter()","title":"Iterator Class — Iterator","text":"increment iterator","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$next_iter()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"invisibly returns Iterator object","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Iterator Class — Iterator","text":"print method","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$print()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-reset-iter-","dir":"Reference","previous_headings":"","what":"Method reset_iter()","title":"Iterator Class — Iterator","text":"reset iterator '0'","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$reset_iter()"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Iterator Class — Iterator","text":"invisibly returns Iterator object","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Iterator Class — Iterator","text":"objects class cloneable method.","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Class — Iterator","text":"","code":"Iterator$clone(deep = FALSE)"},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator Class — Iterator","text":"deep Whether make deep clone.","code":""},{"path":"https://github.com/rpahl/container/reference/Iterator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator Class — Iterator","text":"","code":"# Numeric Vector v = 1:3 it = Iterator$new(v) it #> <Iterator> at position 0 / 3   try(it$get_value())  # iterator does not point at a value #> Error in it$get_value() : iterator does not point at a value  it$has_value() #> [1] FALSE it$has_next() #> [1] TRUE it$next_iter() #> <Iterator> at position 1 / 3  it$get_value() #> [1] 1 it$get_next() #> [1] 2 it$get_next() #> [1] 3 it #> <Iterator> at position 3 / 3  it$has_next() #> [1] FALSE it$begin() #> <Iterator> at position 1 / 3  it$get_value() #> [1] 1 it$reset_iter() #> <Iterator> at position 0 / 3   # Works by reference for Container co = Container$new(1, 2, 3) it = co$iter() it$get_next() #> [[1]] #> [1] 1 #>  co$discard(2) #> [1, 3] it #> <Iterator> at position 1 / 2  it$get_value() #> [[1]] #> [1] 1 #>  co$discard(1) #> [3] it #> <Iterator> at position 1 / 1  it$get_value() #> [[1]] #> [1] 3 #>  it$begin() #> <Iterator> at position 1 / 1"},{"path":"https://github.com/rpahl/container/reference/iterS3.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterate over Sequences — iterS3","title":"Iterate over Sequences — iterS3","text":"Iterator object allows iterate sequences. implements next_iter() get_value() iterate retrieve value sequence associated . documentation methods see Iterator.","code":""},{"path":"https://github.com/rpahl/container/reference/iterS3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterate over Sequences — iterS3","text":"","code":"iter(x, ...)  # S3 method for class 'Container' iter(x, ...)  # Default S3 method iter(x, ...)  is.iterator(x)  is.iterable(x)  begin(it)  get_value(it)  get_next(it)  has_next(it)  has_value(it)  pos(it)  next_iter(it)  reset_iter(it)  # S3 method for class 'Iterator' length(x)"},{"path":"https://github.com/rpahl/container/reference/iterS3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterate over Sequences — iterS3","text":"x object class Iterable R object. latter case, x always coerced base R list prior creating Iterator. ... parameters passed methods Iterator object","code":""},{"path":"https://github.com/rpahl/container/reference/iterS3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterate over Sequences — iterS3","text":"length returns number elements can iterated .","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/iterS3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterate over Sequences — iterS3","text":"","code":"# Numeric Vector v = 1:3 it = iter(v) it #> <Iterator> at position 0 / 3   try(it$get_value())  # iterator does not point at a value #> Error in it$get_value() : iterator does not point at a value  has_value(it) #> [1] FALSE has_next(it) #> [1] TRUE next_iter(it) #> <Iterator> at position 1 / 3  get_value(it) #> [1] 1 get_next(it) #> [1] 2 get_next(it) #> [1] 3 it #> <Iterator> at position 3 / 3  has_next(it) #> [1] FALSE begin(it) #> <Iterator> at position 1 / 3  get_value(it) #> [1] 1 reset_iter(it) #> <Iterator> at position 0 / 3   # Works on copy of Container co = container(1, 2, 3) it = iter(co) get_next(it) #> [[1]] #> [1] 1 #>  ref_discard(co, 2) co #> [1, 3] it #> <Iterator> at position 1 / 3  get_next(it) #> [[1]] #> [1] 2 #>  ref_clear(co) co #> [] it #> <Iterator> at position 2 / 3  get_next(it) #> [[1]] #> [1] 3 #>  begin(it) #> <Iterator> at position 1 / 3"},{"path":"https://github.com/rpahl/container/reference/OpsArithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Operators — OpsArithmetic","title":"Arithmetic Operators — OpsArithmetic","text":"Binary arithmetic operators Container() objects derived classes.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsArithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Operators — OpsArithmetic","text":"","code":"# S3 method for class 'Container' x + y  # S3 method for class 'Container' x - y  # S3 method for class 'Deque' x + y  # S3 method for class 'Deque' x - y  # S3 method for class 'Dict' x + y  # S3 method for class 'Dict' x - y  # S3 method for class 'Set' x + y  # S3 method for class 'Set' x - y"},{"path":"https://github.com/rpahl/container/reference/OpsArithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Operators — OpsArithmetic","text":"x, y Depending operator least one must class Container() respective derived class least coercible respective class.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsArithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Operators — OpsArithmetic","text":"Container, x + y combines x y new container appending y x. Container, x - y element-wise discards items y x, given element contained x. result always container. Deque, x + y combines x y new deque appending y x. Deque, x - y element-wise removes items y x, given element contained x.  Dict, x + y combines x y new dict updating x y (see also [update()]). Dict, x - y removes keys x appear y. Set, x + y performs set union. Set, x - y performs set difference.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsArithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic Operators — OpsArithmetic","text":"","code":"c1 = container(1, 1:2) c2 = container(2, 1:2) c1 + c2     # same as c(c1, c2) #> [1, (1L 2L), 2, (1L 2L)] c2 + c1     # same as c(c2, c1) #> [2, (1L 2L), 1, (1L 2L)]  c1 - c2 #> [1] c2 - c1 #> [2] c1 - c1 #> [] # Arithmetic d1 = deque(1, 1:2) d2 = deque(2, 1:2) d1 + d2     # same as c(d1, d2) #> |1, (1L 2L), 2, (1L 2L)| d2 + d1     # same as c(d2, d1) #> |2, (1L 2L), 1, (1L 2L)|  d1 - d2 #> |1| d2 - d1 #> |2| d1 - d1 #> ||  # Arithmetic d1 = dict(a = 1, b = list(1, 2)) d2 = dict(a = 2, b = list(1, 2)) d1 + d2      # same as update(d, d2) #> {a = 2, b = list(1, 2)} d2 + d1      # same as update(d2, d) #> {a = 1, b = list(1, 2)} try({ c(d1, d2)    # duplicated keys are not allowed for Dict }) #> Error : duplicated keys are not allowed d1 - d2 #> {} d2 - d1 #> {} d1 - d1 #> {}  # Arithmetic s1 = setnew(1, 1:2) s2 = setnew(2, 1:2) s1 + s2     # same as s1 | s2 or c(c1, s2) #> {1, (1L 2L), 2} s2 + s1     # same #> {2, (1L 2L), 1}  s1 - s2 #> {1} s2 - s1 #> {2}"},{"path":"https://github.com/rpahl/container/reference/OpsCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison Operators — OpsCompare","title":"Comparison Operators — OpsCompare","text":"Binary comparison operators Container() objects derived classes.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison Operators — OpsCompare","text":"","code":"# S3 method for class 'Container' x == y  # S3 method for class 'Container' x != y  # S3 method for class 'Container' x < y  # S3 method for class 'Container' x > y  # S3 method for class 'Container' x <= y  # S3 method for class 'Container' x >= y"},{"path":"https://github.com/rpahl/container/reference/OpsCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison Operators — OpsCompare","text":"x, y least one must Container() object (object one derived classes) must least iterable.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsCompare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison Operators — OpsCompare","text":"x == y TRUE contents x y lexicographically equal. x != y TRUE contents x y equal. x < y TRUE contents x lexicographically less contents y. x <= y TRUE contents x lexicographically less equal contents y.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsCompare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison Operators — OpsCompare","text":"","code":"c1 = container(1, 2, 3) c2 = container(1, 3, 2) c1 == c1            # TRUE #> [1] TRUE c1 != c2            # TRUE #> [1] TRUE c1 <= c1            # TRUE #> [1] TRUE c1 == c2            # FALSE #> [1] FALSE c1 < c2             # TRUE #> [1] TRUE c1 < container(2)   # TRUE #> [1] TRUE c1 < container()    # FALSE #> [1] FALSE"},{"path":"https://github.com/rpahl/container/reference/OpsExtract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parts of a Container Object — OpsExtract","title":"Extract Parts of a Container Object — OpsExtract","text":"Extract parts Container object similar R's base extract operators lists.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsExtract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parts of a Container Object — OpsExtract","text":"","code":"# S3 method for class 'Container' x[...]  # S3 method for class 'Container' x[[i]]"},{"path":"https://github.com/rpahl/container/reference/OpsExtract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parts of a Container Object — OpsExtract","text":"x Container object extract elements. , ... indices specifying elements extract. Indices numeric character vectors list containing .","code":""},{"path":"https://github.com/rpahl/container/reference/OpsExtract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Parts of a Container Object — OpsExtract","text":"[ selects multiple values. indices can numeric character . can passed vector list , convenience, just comma-separated sequence (see Examples). Non-existing indices ignored. [[ selects single value using numeric character index.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsExtract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Parts of a Container Object — OpsExtract","text":"","code":"co = container(a = 1, b = 2, c = 3, d = 4) co[1:2] #> [a = 1, b = 2] co[1, 4] #> [a = 1, d = 4] co[\"d\", 2] #> [d = 4, b = 2] co[list(\"d\", 2)] #> [d = 4, b = 2] co[0:10] #> [a = 1, b = 2, c = 3, d = 4]  co = container(a = 1, b = 2) co[[1]] #> [1] 1 co[[\"a\"]] #> [1] 1 co[[\"x\"]] #> NULL"},{"path":"https://github.com/rpahl/container/reference/OpsLogic.html","id":null,"dir":"Reference","previous_headings":"","what":"Logic Operators — OpsLogic","title":"Logic Operators — OpsLogic","text":"Binary logic operators Container() objects derived classes.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsLogic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logic Operators — OpsLogic","text":"","code":"# S3 method for class 'Dict' x & y  # S3 method for class 'Dict' x | y  # S3 method for class 'Set' x & y  # S3 method for class 'Set' x | y"},{"path":"https://github.com/rpahl/container/reference/OpsLogic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logic Operators — OpsLogic","text":"x, y Depending operator least one must class Container() respective derived class least coercible respective class.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsLogic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logic Operators — OpsLogic","text":"","code":"d1 = dict(a = 1, b = 2) d2 = dict(a = 10, x = 4) d1 & d2      # {a = 1} #> {a = 1}"},{"path":"https://github.com/rpahl/container/reference/OpsReplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Parts of a Container — OpsReplace","title":"Replace Parts of a Container — OpsReplace","text":"Replace parts Container object similar R's base replace operators lists.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsReplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Parts of a Container — OpsReplace","text":"","code":"# S3 method for class 'Container' x[i] <- value  # S3 method for class 'Container' x[[i]] <- value  # S3 method for class 'Container' x$name <- value"},{"path":"https://github.com/rpahl/container/reference/OpsReplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Parts of a Container — OpsReplace","text":"x Container object replace elements. indices specifying elements replace. Indices numeric character vectors list containing . value replacing value type name character string (possibly backtick quoted)","code":""},{"path":"https://github.com/rpahl/container/reference/OpsReplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace Parts of a Container — OpsReplace","text":"[<- replaces multiple values. indices can numeric character . can passed vector list. Values can added 'replacing' new indices, works character indices. [[<- replaces single value given numeric character index. Instead index, also possible replace certain elements passing element curly braces (see Examples), , object searched element element replaced value. $<- replaces single element given name.","code":""},{"path":"https://github.com/rpahl/container/reference/OpsReplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Parts of a Container — OpsReplace","text":"","code":"co = container(a = 1, b = \"bar\") (co[1:2] <- 1:2) #> [1] 1 2  try({ co[3] <- 3 # index out of range }) #> Error : index out of range (length = 2): 3 (co[list(1, \"b\")] <- 3:4)   # mixed numeric/character index #> [1] 3 4  co = container(a = 1, b = 2) co[[1]] <- 9 co[[\"b\"]] <- 8 co[[\"x\"]] <- 7 co$z <- 99 print(co) #> [a = 9, b = 8, x = 7, z = 99]  # Replace 8 by 0 co[[{8}]] <- 0 print(co) #> [a = 9, b = 0, x = 7, z = 99]   co = container(a = 1, b = \"bar\") co$f <- 3 co$b <- 2 co #> [a = 1, b = 2, f = 3]"},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":null,"dir":"Reference","previous_headings":"","what":"OrderedSet Class — OrderedSet","title":"OrderedSet Class — OrderedSet","text":"OrderedSet Set elements always ordered.","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OrderedSet Class — OrderedSet","text":"order elements determined sequentially follows: element's length whether atomic element element's class(es) numeric value (applicable) representation printed name element Set","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"OrderedSet Class — OrderedSet","text":"container::Iterable -> container::Container -> container::Set -> OrderedSet","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"OrderedSet Class — OrderedSet","text":"container::Iterable$iter() container::Container$() container::Container$at2() container::Container$clear() container::Container$count() container::Container$delete() container::Container$delete_at() container::Container$discard() container::Container$discard_at() container::Container$empty() container::Container$get_compare_fun() container::Container$() container::Container$has_name() container::Container$is_empty() container::Container$length() container::Container$names() container::Container$peek_at() container::Container$peek_at2() container::Container$pop() container::Container$print() container::Container$remove() container::Container$rename() container::Container$replace() container::Container$replace_at() container::Container$size() container::Container$type() container::Container$update() container::Set$diff() container::Set$intersect() container::Set$is_equal() container::Set$is_proper_subset() container::Set$is_subset() container::Set$union() container::Set$values()","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"OrderedSet Class — OrderedSet","text":"OrderedSet$new() OrderedSet$add() OrderedSet$clone()","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"OrderedSet Class — OrderedSet","text":"OrderedSet constructor","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OrderedSet Class — OrderedSet","text":"","code":"OrderedSet$new(...)"},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OrderedSet Class — OrderedSet","text":"... initial elements put OrderedSet","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"OrderedSet Class — OrderedSet","text":"returns OrderedSet object","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"OrderedSet Class — OrderedSet","text":"Add element","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"OrderedSet Class — OrderedSet","text":"","code":"OrderedSet$add(value, name = NULL)"},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"OrderedSet Class — OrderedSet","text":"value value type added OrderedSet. name character optional name attribute value.","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"OrderedSet Class — OrderedSet","text":"OrderedSet object.","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"OrderedSet Class — OrderedSet","text":"objects class cloneable method.","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"OrderedSet Class — OrderedSet","text":"","code":"OrderedSet$clone(deep = FALSE)"},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"OrderedSet Class — OrderedSet","text":"deep Whether make deep clone.","code":""},{"path":"https://github.com/rpahl/container/reference/OrderedSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OrderedSet Class — OrderedSet","text":"","code":"s1 = OrderedSet$new(2, 1) s1 #> {1, 2}"},{"path":"https://github.com/rpahl/container/reference/peek.html","id":null,"dir":"Reference","previous_headings":"","what":"Peek at Left or Right of a Deque — peek","title":"Peek at Left or Right of a Deque — peek","text":"Try access first last element return default value found. contrast [at2()], function provides less stricter element access, , remains valid even peeked elements exist.","code":""},{"path":"https://github.com/rpahl/container/reference/peek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peek at Left or Right of a Deque — peek","text":"","code":"peekleft(x, default = NULL)  peek(x, default = NULL)  # S3 method for class 'Deque' peek(x, default = NULL)  # S3 method for class 'Deque' peekleft(x, default = NULL)"},{"path":"https://github.com/rpahl/container/reference/peek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Peek at Left or Right of a Deque — peek","text":"x Deque object. default value returned peeked value exist.","code":""},{"path":"https://github.com/rpahl/container/reference/peek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peek at Left or Right of a Deque — peek","text":"first (peekleft) last (peek) element.","code":""},{"path":"https://github.com/rpahl/container/reference/peek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Peek at Left or Right of a Deque — peek","text":"peek peek last element Deque. peekleft peek first element Deque.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/peek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peek at Left or Right of a Deque — peek","text":"","code":"# Deque d = deque(1, 2, 3) peek(d) #> [1] 3 peekleft(d) #> [1] 1 peek(deque()) #> NULL peek(deque(), default = 0) #> [1] 0 peekleft(deque(), default = 0) #> [1] 0"},{"path":"https://github.com/rpahl/container/reference/peek_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Peek at Indices — peek_at","title":"Peek at Indices — peek_at","text":"Try access elements return default values found. contrast [()], function provides less stricter element access, , remains valid even elements exist.","code":""},{"path":"https://github.com/rpahl/container/reference/peek_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peek at Indices — peek_at","text":"","code":"peek_at(.x, ...)  # S3 method for class 'Container' peek_at(.x, ..., .default = NULL)  # S3 method for class 'dict.table' peek_at(.x, ..., .default = NULL)"},{"path":"https://github.com/rpahl/container/reference/peek_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Peek at Indices — peek_at","text":".x R object respective class. ... indices elements extracted .default value returned peeked value exist.","code":""},{"path":"https://github.com/rpahl/container/reference/peek_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peek at Indices — peek_at","text":"Container, returns value given indices (found) given default value. dict.table, returns columns given indices (found) columns given default value.","code":""},{"path":"https://github.com/rpahl/container/reference/peek_at.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Peek at Indices — peek_at","text":"peek_at tries access specific values.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/peek_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peek at Indices — peek_at","text":"","code":"# Container co = container(a = 1, 2, b = 3, 4) peek_at(co, 1) #> [a = 1] peek_at(co, \"a\") #> [a = 1] peek_at(co, \"x\") #> [] peek_at(co, \"x\", .default = 0) #> [x = 0] peek_at(co, \"a\", \"x\", 2, 9, .default = -1) #> [a = 1, x = -1, 2, -1]  # Dict d = dict(a = 1, b = 1:3) peek_at(d, \"b\") #> {b = (1L 2L 3L)} peek_at(d, \"x\") #> {} peek_at(d, \"x\", .default = 4:7) #> {x = (4L 5L 6L 7L)}  # dict.table dit = dict.table(a = 1:3, b = 4:6) peek_at(dit, \"a\") #> <dict.table> with 3 rows and 1 column #>        a #>    <int> #> 1:     1 #> 2:     2 #> 3:     3 peek_at(dit, 1) #> <dict.table> with 3 rows and 1 column #>        a #>    <int> #> 1:     1 #> 2:     2 #> 3:     3 peek_at(dit, 3) #> <dict.table> with 0 rows and 0 columns #> Null data.table (0 rows and 0 cols) peek_at(dit, \"x\") #> <dict.table> with 0 rows and 0 columns #> Null data.table (0 rows and 0 cols) peek_at(dit, \"x\", .default = 0) #> <dict.table> with 3 rows and 1 column #>        x #>    <num> #> 1:     0 #> 2:     0 #> 3:     0 peek_at(dit, \"a\", \"x\", .default = 0) #> <dict.table> with 3 rows and 2 columns #>        a     x #>    <int> <num> #> 1:     1     0 #> 2:     2     0 #> 3:     3     0"},{"path":"https://github.com/rpahl/container/reference/peek_at2.html","id":null,"dir":"Reference","previous_headings":"","what":"Peek at Single Index — peek_at2","title":"Peek at Single Index — peek_at2","text":"Try access element return default value found. contrast [at2()], function provides less stricter element access, , remains valid even peeked elements exist.","code":""},{"path":"https://github.com/rpahl/container/reference/peek_at2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peek at Single Index — peek_at2","text":"","code":"peek_at2(x, index, default = NULL)  # S3 method for class 'Container' peek_at2(x, index, default = NULL)  # S3 method for class 'dict.table' peek_at2(x, index, default = NULL)"},{"path":"https://github.com/rpahl/container/reference/peek_at2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Peek at Single Index — peek_at2","text":"x R object respective class. index character name numeric position sought value. default value returned peeked value exist.","code":""},{"path":"https://github.com/rpahl/container/reference/peek_at2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peek at Single Index — peek_at2","text":"Container, returns value given index (found) given default value. dict.table, returns column named index exist otherwise given default value. default length match number rows, recycled accordingly warning given, unless default value length 1, case recycling done silently.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/peek_at2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peek at Single Index — peek_at2","text":"","code":"# Container co = container(a = 1, 2, b = 3, 4) peek_at2(co, 1) #> [1] 1 peek_at2(co, \"a\") #> [1] 1 peek_at2(co, \"x\") #> NULL peek_at2(co, \"x\", default = 0) #> [1] 0  # Dict d = dict(a = 1, b = 1:3) peek_at2(d, \"b\") #> [1] 1 2 3 peek_at2(d, \"x\") #> NULL peek_at2(d, \"x\", default = 4:7) #> [1] 4 5 6 7  # dict.table dit = dict.table(a = 1:3, b = 4:6) peek_at2(dit, \"a\") #> [1] 1 2 3 peek_at2(dit, 1) #> [1] 1 2 3 peek_at2(dit, 3) #> NULL peek_at2(dit, 3, default = 9) #> [1] 9 9 9 peek_at2(dit, \"x\") #> NULL peek_at2(dit, \"x\", default = 0) #> [1] 0 0 0"},{"path":"https://github.com/rpahl/container/reference/pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and Remove Element — pop","title":"Get and Remove Element — pop","text":"Search return element remove afterwards object. element found, signal error.","code":""},{"path":"https://github.com/rpahl/container/reference/pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and Remove Element — pop","text":"","code":"ref_pop(.x, ...)  ref_popleft(.x, ...)  # S3 method for class 'Deque' ref_pop(.x, ...)  # S3 method for class 'Deque' ref_popleft(.x, ...)  # S3 method for class 'Container' ref_pop(.x, index, ...)  # S3 method for class 'dict.table' ref_pop(.x, index, ...)"},{"path":"https://github.com/rpahl/container/reference/pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and Remove Element — pop","text":".x R object. ... additional arguments passed methods. index character name numeric position value popped","code":""},{"path":"https://github.com/rpahl/container/reference/pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and Remove Element — pop","text":"Deque first (ref_popleft) last (ref_pop) element deque removed. Container value given index removed Container object. index found, error raised. dict.table, returns column given index removed dict.table. column exist, error raised.","code":""},{"path":"https://github.com/rpahl/container/reference/pop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and Remove Element — pop","text":"functions work reference, , original object altered. ref_pop(.x) tries access specific values. ref_popleft(.x) pops first element Deque.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and Remove Element — pop","text":"","code":"# Deque d = deque(1, 2, 3) ref_pop(d) #> [1] 3 ref_popleft(d) #> [1] 1  try({ ref_pop(deque())  # pop at empty Deque }) #> Error : pop at empty Deque  # Container co = container(a = 1, b = 1:3, d = \"foo\") ref_pop(co, \"b\") #> [1] 1 2 3 ref_pop(co, 1) #> [1] 1  try({ ref_pop(co, \"x\")  # index 'x' not found }) #> Error : index 'x' not found  # dict.table dit = dict.table(a = 1:3, b = 4:6) ref_pop(dit, \"a\") #> [1] 1 2 3 ref_pop(dit, 1) #> [1] 4 5 6  try({ ref_pop(dit, \"x\")  # index 'x' not found }) #> Error : index 'x' not found"},{"path":"https://github.com/rpahl/container/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Elements Safely — rename","title":"Rename Elements Safely — rename","text":"Search old name replace new name. either old name exist name result name-clash already existing name, error signaled.","code":""},{"path":"https://github.com/rpahl/container/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Elements Safely — rename","text":"","code":"rename(.x, old, new)  ref_rename(.x, old, new)  # S3 method for class 'Container' rename(.x, old, new)  # S3 method for class 'dict.table' rename(.x, old, new)  # S3 method for class 'dict.table' ref_rename(.x, old, new)  # Default S3 method rename(.x, old, new)"},{"path":"https://github.com/rpahl/container/reference/rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Elements Safely — rename","text":".x dict.table object old character old name new character new name","code":""},{"path":"https://github.com/rpahl/container/reference/rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Elements Safely — rename","text":"standard R vectors renames old new returns renamed vector. Container, object class Container (one respective derived classes). dict.table renames key old new place (.e. reference) invisibly returns dict.table() object.","code":""},{"path":"https://github.com/rpahl/container/reference/rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename Elements Safely — rename","text":"passed old new names can vectors always must length must unique prevent double-renaming. rename uses copy semantics ref_rename works reference, , renames elements place.","code":""},{"path":"https://github.com/rpahl/container/reference/rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Elements Safely — rename","text":"","code":"# Container co = container(a = 1, b = 2, 3) rename(co, c(\"a\", \"b\"), c(\"a1\", \"y\")) #> [a1 = 1, y = 2, 3] print(co) #> [a = 1, b = 2, 3] ref_rename(co, c(\"a\", \"b\"), c(\"a1\", \"y\")) #> [a1 = 1, y = 2, 3] print(co) #> [a1 = 1, y = 2, 3]  # dict.table dit = dict.table(a = 1, b = 2, c = 3) rename(dit, c(\"a\", \"b\"), c(\"a1\", \"y\")) #> <dict.table> with 1 row and 3 columns #>       a1     y     c #>    <num> <num> <num> #> 1:     1     2     3 print(dit) #> <dict.table> with 1 row and 3 columns #>        a     b     c #>    <num> <num> <num> #> 1:     1     2     3 ref_rename(dit, c(\"a\", \"b\"), c(\"a1\", \"y\")) print(dit) #> <dict.table> with 1 row and 3 columns #>       a1     y     c #>    <num> <num> <num> #> 1:     1     2     3"},{"path":"https://github.com/rpahl/container/reference/replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Values in Containers Safely — replace","title":"Replace Values in Containers Safely — replace","text":"Try find replace elements signal error found, unless stated explicitly add element (see option add).","code":""},{"path":"https://github.com/rpahl/container/reference/replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Values in Containers Safely — replace","text":"","code":"replace(.x, ...)  ref_replace(.x, ...)  # S3 method for class 'Container' replace(.x, old, new, add = FALSE, ...)  # S3 method for class 'Container' ref_replace(.x, old, new, add = FALSE, ...)  # S3 method for class 'Dict' replace(.x, old, new, ...)  # S3 method for class 'Dict' ref_replace(.x, old, new, ...)"},{"path":"https://github.com/rpahl/container/reference/replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Values in Containers Safely — replace","text":".x R object. ... additional arguments passed methods. old old element found replaced. new new element replacing old one. add logical FALSE (default) element found, error given. contrast, set TRUE new element added regardless whether used replacement existing element just added new element.","code":""},{"path":"https://github.com/rpahl/container/reference/replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Values in Containers Safely — replace","text":"Container, object class Container (one respective derived classes). Dict object class Dict.","code":""},{"path":"https://github.com/rpahl/container/reference/replace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace Values in Containers Safely — replace","text":"replace uses copy semantics ref_replace works reference.","code":""},{"path":"https://github.com/rpahl/container/reference/replace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Values in Containers Safely — replace","text":"","code":"co = container(\"x\", 9) replace(co, 9, 0) #> [\"x\", 0] replace(co, \"x\", 0) #> [0, 9] try({ replace(co, \"z\", 0)              # old element (\"z\") is not in Container }) #> Error : old element (\"z\") is not in Container replace(co, \"z\", 0, add = TRUE)  # just add the zero without replacement #> [\"x\", 9, 0]   d = dict(a = 1, b = \"z\") replace(d, 1, 1:5) #> {a = (1L 2L 3L 4L ...), b = \"z\"} replace(d, \"z\", \"a\") #> {a = 1, b = \"a\"}  try({ replace(d, \"a\", 2)              # old element (\"a\") is not in Dict }) #> Error : old element (\"a\") is not in Dict"},{"path":"https://github.com/rpahl/container/reference/replace_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Values at Indices Safely — replace_at","title":"Replace Values at Indices Safely — replace_at","text":"Try find replace elements given indices signal error found, unless stated explicitly add element (see option add).","code":""},{"path":"https://github.com/rpahl/container/reference/replace_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Values at Indices Safely — replace_at","text":"","code":"replace_at(.x, ...)  ref_replace_at(.x, ...)  # S3 method for class 'Container' replace_at(.x, ..., .add = FALSE)  # S3 method for class 'Container' ref_replace_at(.x, ..., .add = FALSE)  # S3 method for class 'dict.table' replace_at(.x, ..., .add = FALSE)  # S3 method for class 'dict.table' ref_replace_at(.x, ..., .add = FALSE)"},{"path":"https://github.com/rpahl/container/reference/replace_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Values at Indices Safely — replace_at","text":".x R object. ... either name = value pairs two vectors/lists names/values replaced. .add logical FALSE (default) index invalid, error given. set TRUE new element added given index regardless whether index existed . Indices can consist numbers names , except adding values new indices, allowed names.","code":""},{"path":"https://github.com/rpahl/container/reference/replace_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Values at Indices Safely — replace_at","text":"Container, object class Container (one respective derived classes). dict.table object class dict.table.","code":""},{"path":"https://github.com/rpahl/container/reference/replace_at.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace Values at Indices Safely — replace_at","text":"replace_at uses copy semantics ref_replace_at works reference.","code":""},{"path":"https://github.com/rpahl/container/reference/replace_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Values at Indices Safely — replace_at","text":"","code":"co = container(a = 0, b = \"z\") replace_at(co, a = 1, b = 2) #> [a = 1, b = 2] replace_at(co, 1:2, 1:2)                 # same #> [a = 1L, b = 2L] replace_at(co, c(\"a\", \"b\"), list(1, 2))  # same #> [a = 1, b = 2]  try({ replace_at(co, x = 1)                    # names(s) not found: 'x' }) #> Error : names(s) not found: 'x' replace_at(co, x = 1, .add = TRUE)       # ok (adds x = 1) #> [a = 0, b = \"z\", x = 1]   dit = dict.table(a = 1:3, b = 4:6) replace_at(dit, a = 3:1) #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     3     4 #> 2:     2     5 #> 3:     1     6 replace_at(dit, 1, 3:1)                  # same #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     3     4 #> 2:     2     5 #> 3:     1     6 replace_at(dit, \"a\", 3:1)                # same #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     3     4 #> 2:     2     5 #> 3:     1     6 replace_at(dit, a = 3:1, b = 6:4) #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     3     6 #> 2:     2     5 #> 3:     1     4 replace_at(dit, 1:2, list(3:1, 6:4))     # same #> <dict.table> with 3 rows and 2 columns #>        a     b #>    <int> <int> #> 1:     3     6 #> 2:     2     5 #> 3:     1     4  try({ replace_at(dit, x = 1)                   # column(s) not found: 'x' }) #> Error : column(s) not found: 'x' replace_at(dit, x = 1, .add = TRUE)      # ok (adds column) #> <dict.table> with 3 rows and 3 columns #>        a     b     x #>    <int> <int> <num> #> 1:     1     4     1 #> 2:     2     5     1 #> 3:     3     6     1"},{"path":"https://github.com/rpahl/container/reference/rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Elements — rev","title":"Reverse Elements — rev","text":"rev provides reversed version argument.","code":""},{"path":"https://github.com/rpahl/container/reference/rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Elements — rev","text":"","code":"ref_rev(x)  # S3 method for class 'Deque' ref_rev(x)  # S3 method for class 'Deque' rev(x)"},{"path":"https://github.com/rpahl/container/reference/rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Elements — rev","text":"x Deque object","code":""},{"path":"https://github.com/rpahl/container/reference/rev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Elements — rev","text":"Deque, object class Deque","code":""},{"path":"https://github.com/rpahl/container/reference/rev.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse Elements — rev","text":"rev uses copy semantics ref_rev works reference, , reverse elements place.","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Elements — rev","text":"","code":"d = deque(a = 1, b = 2, 3) rev(d) #> |3, b = 2, a = 1| print(d) #> |a = 1, b = 2, 3| ref_rev(d) #> |3, b = 2, a = 1| print(d) #> |3, b = 2, a = 1|"},{"path":"https://github.com/rpahl/container/reference/rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate Elements — rotate","title":"Rotate Elements — rotate","text":"Rotate elements n steps right. n negative, rotate left.","code":""},{"path":"https://github.com/rpahl/container/reference/rotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate Elements — rotate","text":"","code":"rotate(x, n = 1L)  ref_rotate(x, n = 1L)  # S3 method for class 'Deque' rotate(x, n = 1L)  # S3 method for class 'Deque' ref_rotate(x, n = 1L)"},{"path":"https://github.com/rpahl/container/reference/rotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate Elements — rotate","text":"x R object. n integer number steps rotate","code":""},{"path":"https://github.com/rpahl/container/reference/rotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate Elements — rotate","text":"Deque returns rotated Deque() object.","code":""},{"path":"https://github.com/rpahl/container/reference/rotate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rotate Elements — rotate","text":"rotate uses copy semantics, ref_rotate works reference, , rotates place original object.","code":""},{"path":"https://github.com/rpahl/container/reference/rotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate Elements — rotate","text":"","code":"d = deque(1, 2, 3, 4) rotate(d) #> |4, 1, 2, 3| rotate(d, n = 2) #> |3, 4, 1, 2|"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Class — Set","title":"Set Class — Set","text":"Set considered implemented specialized Container, , elements always unique Container provides typical set operations union intersect. standard S3 interface, see setnew().","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Set Class — Set","text":"container::Iterable -> container::Container -> Set","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Set Class — Set","text":"container::Iterable$iter() container::Container$() container::Container$at2() container::Container$clear() container::Container$count() container::Container$delete() container::Container$delete_at() container::Container$discard() container::Container$discard_at() container::Container$empty() container::Container$get_compare_fun() container::Container$() container::Container$has_name() container::Container$is_empty() container::Container$length() container::Container$names() container::Container$peek_at() container::Container$peek_at2() container::Container$pop() container::Container$print() container::Container$remove() container::Container$rename() container::Container$replace() container::Container$replace_at() container::Container$size() container::Container$type() container::Container$update()","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Set Class — Set","text":"Set$new() Set$add() Set$diff() Set$intersect() Set$union() Set$is_equal() Set$is_subset() Set$is_proper_subset() Set$values() Set$clone()","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Set Class — Set","text":"Set constructor","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$new(...)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"... initial elements put Set","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"returns Set object","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"Set Class — Set","text":"Add element","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$add(value, name = NULL)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"value value type added Set. name character optional name attribute value.","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"Set object.","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-diff-","dir":"Reference","previous_headings":"","what":"Method diff()","title":"Set Class — Set","text":"Set difference","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$diff(s)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"s Set object 'subtract'","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"Set object updated result set difference s.","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-intersect-","dir":"Reference","previous_headings":"","what":"Method intersect()","title":"Set Class — Set","text":"Set intersection","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$intersect(s)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"s Set object 'intersect'","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"Set object result intersection s.","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-union-","dir":"Reference","previous_headings":"","what":"Method union()","title":"Set Class — Set","text":"Set union","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$union(s)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"s Set object 'unified'","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"Set object result union s.","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-is-equal-","dir":"Reference","previous_headings":"","what":"Method is_equal()","title":"Set Class — Set","text":"Set equality","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$is_equal(s)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"s Set object compare ","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"TRUE equal s, otherwise FALSE","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-is-subset-","dir":"Reference","previous_headings":"","what":"Method is_subset()","title":"Set Class — Set","text":"Set proper subset","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$is_subset(s)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"s Set object compare ","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"TRUE subset s, otherwise FALSE","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-is-proper-subset-","dir":"Reference","previous_headings":"","what":"Method is_proper_subset()","title":"Set Class — Set","text":"Set subset","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$is_proper_subset(s)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"s Set object compare ","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"TRUE proper subset s, otherwise FALSE","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-values-","dir":"Reference","previous_headings":"","what":"Method values()","title":"Set Class — Set","text":"Get Set values","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$values()"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Set Class — Set","text":"elements set base list","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Set Class — Set","text":"objects class cloneable method.","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Class — Set","text":"","code":"Set$clone(deep = FALSE)"},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Class — Set","text":"deep Whether make deep clone.","code":""},{"path":"https://github.com/rpahl/container/reference/Set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Class — Set","text":"","code":"s1 = Set$new(1, 2) s1 #> {1, 2} s1$add(1) #> {1, 2} s1$add(3) #> {1, 2, 3} s2 = Set$new(3, 4, 5) s1$union(s2) #> {1, 2, 3, 4, 5} s1 #> {1, 2, 3, 4, 5}  s1 = Set$new(1, 2, 3) s1$intersect(s2) #> {3} s1 #> {3}  s1$diff(s2) #> {} s1$diff(s1) #> {} s1 #> {}"},{"path":"https://github.com/rpahl/container/reference/setS3.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and ordered Set — SetS3","title":"Set and ordered Set — SetS3","text":"Set considered implemented specialized Container, , Set elements always unique. provides typical set operations union intersect.","code":""},{"path":"https://github.com/rpahl/container/reference/setS3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and ordered Set — SetS3","text":"","code":"setnew(..., .ordered = FALSE)  as.set(x)  as.orderedset(x)  is.set(x)  is.orderedset(x)"},{"path":"https://github.com/rpahl/container/reference/setS3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and ordered Set — SetS3","text":"... initial elements put Set. .ordered logical TRUE elements Set ordered. x R object type .set() .set() class Set S3 methods.","code":""},{"path":"https://github.com/rpahl/container/reference/setS3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set and ordered Set — SetS3","text":"Methods alter Set objects usually come two versions providing either copy reference semantics latter start 'ref_' note reference semantic, example, add() ref_add(). setnew(...) initializes returns Set() object. .set(x) coerces x set. .orderedset(x) coerces x ordered set. .set(x) returns TRUE x class Set FALSE otherwise. .orderedset(x) returns TRUE x class OrderedSet FALSE otherwise. x & y performs set intersection x y x | y performs set union x y","code":""},{"path":[]},{"path":"https://github.com/rpahl/container/reference/setS3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and ordered Set — SetS3","text":"","code":"s = setnew(1, b = NA, 1:3, c = container(\"a\", 1)) is.set(s) #> [1] TRUE print(s) #> {1, b = NA, (1L 2L 3L), c = [\"a\", 1]} length(s) #> [1] 4 names(s) #> [1] \"\"  \"b\" \"\"  \"c\" as.list(s) #> [[1]] #> [1] 1 #>  #> $b #> [1] NA #>  #> [[3]] #> [1] 1 2 3 #>  #> $c #> [\"a\", 1] #>  unpack(s)   # flatten recursively similar to unlist #>       b              c1  c2  #> \"1\"  NA \"1\" \"2\" \"3\" \"a\" \"1\"   so = setnew(2, 1, .ordered = TRUE) print(so) #> {1, 2} add(so, 0) #> {0, 1, 2} # Math s = setnew(5:3, 1, 2) s #> {(5L 4L 3L), 1, 2} abs(s) #> {5, 4, 3, 1, 2} cumsum(s) #> {5, 9, 12, 13, 15} round(s) #> {5, 4, 3, 1, 2} exp(s) #> {148.4132, 54.59815, 20.08554, 2.718282, 7.389056}  # Summary range(s) #> [1] 1 5 min(s) #> [1] 1 max(s) #> [1] 5  s1 = setnew(1, 1:2) s2 = setnew(2, 1:2) s1 + s2     # same as s1 | s2 or c(c1, s2) #> {1, (1L 2L), 2} s2 + s1     # same #> {2, (1L 2L), 1}  s1 - s2 #> {1} s2 - s1 #> {2}  s1 = setnew(1, b = 2) s2 = setnew(1, b = 4) s1 & s2     # {1} #> {1}  s1 | s2     # {1, b = 2, b = 4} #> {1, b = 2, b = 4}"},{"path":"https://github.com/rpahl/container/reference/unpack.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack Nested Objects — unpack","title":"Unpack Nested Objects — unpack","text":"Similary unlist() recursively unpacks (possibly nested) structure flat list. contrast unlist(), unpack() also works (possibly nested) Container() objects. principle, works object can transformed list via .list.","code":""},{"path":"https://github.com/rpahl/container/reference/unpack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack Nested Objects — unpack","text":"","code":"unpack(x, recursive = TRUE, use.names = TRUE)"},{"path":"https://github.com/rpahl/container/reference/unpack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack Nested Objects — unpack","text":"x R object recursive logical descend recursively nested objects? use.names logical names preserved?","code":""},{"path":"https://github.com/rpahl/container/reference/unpack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack Nested Objects — unpack","text":"list","code":""},{"path":"https://github.com/rpahl/container/reference/update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Object with Elements from Another Object — update","title":"Update Object with Elements from Another Object — update","text":"Takes object updates values another object replacing values existing names adding values new names object. common use case update parameter lists.","code":""},{"path":"https://github.com/rpahl/container/reference/update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Object with Elements from Another Object — update","text":"","code":"ref_update(object, other, ...)  # S3 method for class 'Container' update(object, other, ...)  # S3 method for class 'Container' ref_update(object, other, ...)  # S3 method for class 'dict.table' update(object, other, ...)  # S3 method for class 'dict.table' ref_update(object, other, ...)  # S3 method for class 'list' update(object, other, ...)"},{"path":"https://github.com/rpahl/container/reference/update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Object with Elements from Another Object — update","text":"object R object object type object ... additional arguments passed methods.","code":""},{"path":"https://github.com/rpahl/container/reference/update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Object with Elements from Another Object — update","text":"Container, object class Container (one respective derived classes). dict.table object class dict.table. list, updated object class list.","code":""},{"path":"https://github.com/rpahl/container/reference/update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Object with Elements from Another Object — update","text":"update uses copy semantics ref_update works reference, , updates place.","code":""},{"path":"https://github.com/rpahl/container/reference/update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Object with Elements from Another Object — update","text":"","code":"d1 = dict(a = 1, b = 2) d2 = dict(       b = 0, c = 3) update(d1, d2)  # {a = 1, b = 0, c = 3} #> {a = 1, b = 0, c = 3} update(d2, d1)  # {a = 1, b = 2, c = 3} #> {a = 1, b = 2, c = 3}  dit1 = dict.table(a = 1:2, b = 3:4) dit2 = dict.table(         b = 5:6, c = 8:9) update(d1, d2) #> {a = 1, b = 0, c = 3} update(d2, d1) #> {a = 1, b = 2, c = 3}  l1 = list(1, b = 2) l2 = list(   b = 0, c = 3) update(l1, l2) #> [[1]] #> [1] 1 #>  #> $b #> [1] 0 #>  #> $c #> [1] 3 #>  update(l2, l1) #> $b #> [1] 2 #>  #> $c #> [1] 3 #>  #> [[3]] #> [1] 1 #>"},{"path":"https://github.com/rpahl/container/news/index.html","id":"container-development-version","dir":"Changelog","previous_headings":"","what":"container (development version)","title":"container (development version)","text":"update README vignettes add News menu including Changelog package site link packges via R universe","code":""},{"path":"https://github.com/rpahl/container/news/index.html","id":"container-105","dir":"Changelog","previous_headings":"","what":"container 1.0.5","title":"container 1.0.5","text":"CRAN release: 2024-12-02 upgrade pages use bootstrap 5 update README remove Date field DESCRIPTION file fix documentation signaled CRAN devel checks","code":""},{"path":"https://github.com/rpahl/container/news/index.html","id":"container-104","dir":"Changelog","previous_headings":"","what":"container 1.0.4","title":"container 1.0.4","text":"CRAN release: 2022-12-11 fix “don’t run” examples fix Rd files regarding tidy HTML","code":""},{"path":"https://github.com/rpahl/container/news/index.html","id":"container-101","dir":"Changelog","previous_headings":"","what":"container 1.0.1","title":"container 1.0.1","text":"CRAN release: 2022-02-19 prevent duplicated column names renaming dict.tables don’t check names dict.table constructor - allow optional checking","code":""},{"path":"https://github.com/rpahl/container/news/index.html","id":"container-100","dir":"Changelog","previous_headings":"","what":"container 1.0.0","title":"container 1.0.0","text":"CRAN release: 2021-11-06","code":""},{"path":"https://github.com/rpahl/container/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"container 1.0.0","text":"update brings big changes breaks earlier functions. However, version 1.0.0, now , API remain stable. classes Container, Deque, Set Dict now modified similar way elements can added, extracted, replaced removed therefore share operations. motivation behind provide specialized data structures enhance base R list time still ‘feel’ familiar R users. result, classes (including Set Dict) now provide named elements access via name integer indices similar base R list, users enable use right start without read manual. new class dict.table provided, mixture data.table Dict, extends data.table Dict operations enhance data column management. List changes Set Dict provide positional access Dict, internally key-value pairs stored hash-table elements always sorted lexicographically keys addition Set new class OrderedSet, elements also always sorted. objects class now initialized elements passed via name = value done base R lists. add() now accepts multiple elements passed via name = value. delete() (formerly remove) discard() now always work value. removing elements index, now delete_at() discard_at() used. () now always works value. checking elements name, now has_name() used. print() method fully revised now (inspired sets package) prints compact. size() now determined length() count(), pop, update now available classes S3 method interface now default provides copy semantics. reference semantics, functions starting ref_ used.","code":""},{"path":"https://github.com/rpahl/container/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"container 1.0.0","text":"new classes OrderedSet dict.table classes support named elements names() used get set names base R list. extract replace parts object via standard [, [[, $ operators using character numeric indices time. container_options() customize printing applied comparison operators unpack() unpack nested container objects replace() replace_at() replace values values indices () at2() safe element extraction peek_at() peek_at2() loose element peeking default values ref_pop() get remove element given index rename() elements place comparison operators compare containers lexicographically arithmetic operators group generic functions Math Summary","code":""},{"path":"https://github.com/rpahl/container/news/index.html","id":"deprecated-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"Deprecated Functions","title":"container 1.0.0","text":"empty() - use is_empty() instead set() - use setnew() instead size() - use length() instead sortkey() - keys Dict objects now always sorted remove() - use delete() instead type() - use anymore values() - use .list() instead","code":""},{"path":"https://github.com/rpahl/container/news/index.html","id":"container-030","dir":"Changelog","previous_headings":"","what":"container 0.3.0","title":"container 0.3.0","text":"CRAN release: 2018-12-01 Initial release","code":""}]
